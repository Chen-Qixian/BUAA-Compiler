program PASCALS(INPUT,OUTPUT,PRD,PRR);
{  author:N.Wirth, E.T.H. CH-8092 Zurich,1.3.76 }
{  modified by R.E.Berry
    Department of computer studies
    University of Lancaster

    Variants of this program are used on
    Data General Nova,Apple,and
    Western Digital Microengine machines. }
{   further modified by M.Z.Jin
    Department of Computer Science&Engineering BUAA,0ct.1989
}
const nkw = 27;    { no. of key words }
      alng = 10;   { no. of significant chars in identifiers }
      llng = 121;  { input line length }
      emax = 322;  { max exponent of real numbers }
      emin = -292; { min exponent }
      kmax = 15;   { max no. of significant digits }
      tmax = 100;  { size of table }
      bmax = 20;   { size of block-talbe }
      amax = 30;   { size of array-table }
      c2max = 20;  { size of real constant table }
      csmax = 30;  { max no. of cases }
      cmax = 800;  { size of code }
      lmax = 7;    { maximum level }
      smax = 600;  { size of string-table }
      ermax = 58;  { max error no. }
      omax = 63;   { highest order code }
      xmax = 32767;  { 2**15-1 } {*index的范围*}
      nmax = 32767;  { 2**15-1 } {*数字的范围*}
      lineleng = 132; { output line length }
      linelimit = 200;	{*行数限制*}
      stacksize = 1450;	{*数据栈的大小*}
type symbol = ( intcon, realcon, charcon, stringcon,
                notsy, plus, minus, times, idiv, rdiv, imod, andsy, orsy,
                eql, neq, gtr, geq, lss, leq,
                lparent, rparent, lbrack, rbrack, comma, semicolon, period,
                colon, becomes, constsy, typesy, varsy, funcsy,
                procsy, arraysy, recordsy, programsy, ident,
                beginsy, ifsy, casesy, repeatsy, whilesy, forsy,
                endsy, elsesy, untilsy, ofsy, dosy, tosy, downtosy, thensy);	{*symbol为后面这些元素组成的集合*}
     index = -xmax..+xmax;
     alfa = packed array[1..alng]of char; {*10个字符大小的数组*}
     objecttyp = (konstant, vvariable, typel, prozedure, funktion ); {*标识符的种类, 分别为常量、变量、类型、过程和函数*}
     types = (notyp, ints, reals, bools, chars, arrays, records );	{*标识符的类型, 其中notyp一般对应的是过程名*}
     symset = set of symbol;  {*symbol的集合*}
     typset = set of types;
     item = record
               typ: types;
               ref: index;
            end;

     order = packed record
                f: -omax..+omax;
				        x: -lmax..+lmax;
                y: -nmax..+nmax
			end;
var   ch:         char; { last character read from source program }
      rnum:       real; { real number from insymbol }
	    inum:       integer;     { integer from insymbol }
	    sleng:      integer;     { string length }
      cc:         integer;     { character counter }
      lc:         integer;     { program location counter }
      ll:         integer;     { length of current line }
      errpos:     integer;
      t,a,b,sx,c1,c2:integer;  { indices to tables }
      iflag, oflag, skipflag, stackdump, prtables: boolean;
      sy:         symbol;      { last symbol read by insymbol }
      errs:       set of 0..ermax;   {*记录错误的集合*}
      id:         alfa;        { identifier from insymbol }
      progname:   alfa;
      stantyps:   typset;
      constbegsys, typebegsys, blockbegsys, facbegsys, statbegsys: symset;
      line:       array[1..llng] of char;
      key:        array[1..nkw] of alfa;	{*保留字集合*}
      ksy:        array[1..nkw] of symbol;	{*保留字对应的symbol集合*}
      sps:        array[char]of symbol;  { special symbols }
      display:    array[0..lmax] of integer;
      tab:        array[0..tmax] of      { indentifier lable }
                  packed record
						            name: alfa;		{*标识符名字,取前十个字符*}
						            link: index;	{*指向同一个分程序中上一个标识符在tab表中的位置*}
						            obj:  objecttyp;	{*标识符种类*}
						            typ:  types;		{*标识符类型*}
						            ref:  index;
						            normal: boolean;
						            lev:  0..lmax;
						            adr: integer
				          end;
	    atab:        array[1..amax] of    { array-table }
                  packed record
                     inxtyp,eltyp: types;
                     elref,low,high,elsize,size: index
                  end;
      btab:       array[1..bmax] of    { block-table }
                  packed record
                     last, lastpar, psize, vsize: index
                  end;
      stab:       packed array[0..smax] of char; { string table }
      rconst:     array[1..c2max] of real;		{*实常量表*}
      code:       array[0..cmax] of order;		{*目标代码区,存储编译生成的目标指令*}
      psin,psout,prr,prd:text;      { default in pascal p }
      inf, outf, fprr: string;

procedure errormsg;	{*打印出错信息摘要*}
  var k : integer;
     msg: array[0..ermax] of alfa;	{*错误信息数组,每一条数组最多10个字符*}
  begin
    msg[0] := 'undef id  ';    msg[1] := 'multi def ';
    msg[2] := 'identifier';    msg[3] := 'program   ';
	  msg[4] := ')         ';    msg[5] := ':         ';
    msg[6] := 'syntax    ';    msg[7] := 'ident,var ';
	  msg[8] := 'of        ';    msg[9] := '(         ';
    msg[10] := 'id,array  ';    msg[11] := '(         ';
    msg[12] := ']         ';    msg[13] := '..        ';
    msg[14] := ';         ';    msg[15] := 'func. type';
    msg[16] := '=         ';    msg[17] := 'boolean   ';
    msg[18] := 'convar typ';    msg[19] := 'type      ';
    msg[20] := 'prog.param';    msg[21] := 'too big   ';
    msg[22] := '.         ';    msg[23] := 'type(case)';
    msg[24] := 'character ';    msg[25] := 'const id  ';
    msg[26] := 'index type';    msg[27] := 'indexbound';
    msg[28] := 'no array  ';    msg[29] := 'type id   ';
    msg[30] := 'undef type';    msg[31] := 'no record ';
    msg[32] := 'boole type';    msg[33] := 'arith type';
	  msg[34] := 'integer   ';    msg[35] := 'types     ';
    msg[36] := 'param type';    msg[37] := 'variab id ';
	  msg[38] := 'string    ';    msg[39] := 'no.of pars';
    msg[40] := 'real numbr';    msg[41] := 'type      ';
	  msg[42] := 'real type ';    msg[43] := 'integer   ';
    msg[44] := 'var,const ';    msg[45] := 'var,proc  ';
    msg[46] := 'types(:=) ';    msg[47] := 'typ(case) ';
    msg[48] := 'type      ';    msg[49] := 'store ovfl';
    msg[50] := 'constant  ';    msg[51] := ':=        ';
    msg[52] := 'then      ';    msg[53] := 'until     ';
    msg[54] := 'do        ';    msg[55] := 'to downto ';
    msg[56] := 'begin     ';    msg[57] := 'end       ';
    msg[58] := 'factor';

    writeln(psout);		{*往输出文件中打印一个空行*}
    writeln(psout,'key words');
    k := 0;
    while errs <> [] do		{*循环直到错误信息数组为空*}
      begin
        while not( k in errs )do k := k + 1;	{*k从0一直递增,直到errs中有k类型的错误信息则处理*}
		writeln(psout, k, ' ', msg[k] );	{*向文件中输出错误类型的编号和信息*}
        errs := errs - [k]	{*把处理过的错误信息从errors中删除*}
	  end { while errs }
	end { errormsg } ;

procedure endskip;	{*在被跳过的源程序代码下面加下划线*}
  begin                 { underline skipped part of input }
    while errpos < cc do
      begin
        write( psout, '-');
        errpos := errpos + 1
      end;
    skipflag := false
  end { endskip };


procedure nextch;  { read next character; process line end }
  begin
    if cc = ll	{*读到了一行末尾*}
    then begin
           if eof( psin )	{*文件读完了*}
           then begin
                  writeln( psout );
                  writeln( psout, 'program incomplete' );
                  errormsg;
                  exit;
                end;
           if errpos <> 0	{*一行读完后说明有错误开始进行错误处理*}
           then begin
                  if skipflag then endskip;	{*被跳读的源程序行下面加印下划线提示用户注意*}
                  writeln( psout );
                  errpos := 0
                end;
           write( psout, lc: 5, ' ');	{*将当前行号和一个空格打印到文件中,lc:5表示输出长度大于等于5,不足5前面用空格补齐*}
           ll := 0;		{*将行长度和行指针清零*}
           cc := 0;
           while not eoln( psin ) do  {*因为在读字符之前当前行已经读完了，所以psin的指针指向的是下一行代码,于是进行循环将psin所在行的代码装入line中*}
             begin
               ll := ll + 1;
               read( psin, ch );
               write( psout, ch );
               line[ll] := ch
             end;
           ll := ll + 1;
           readln( psin );	{*让psin指向下一行代码*}
           line[ll] := ' ';	{*一行的末尾置为空格*}
           writeln( psout );
         end;
    cc := cc + 1;
    ch := line[cc];		{*ch = 取出来的字符*}
  end { nextch };

procedure error( n: integer );	{*打印出错位置和出错编号, 并将错误编号加入errs中*}
begin
  if errpos = 0
  then write ( psout, '****' );
  if cc > errpos
  then begin
         write( psout, ' ': cc-errpos, '^', n:2);
		 errpos := cc + 3;
         errs := errs +[n]
		end
end { error };

procedure fatal( n: integer );	{*打印表格溢出信息并终止汇编程序*}
  var msg : array[1..7] of alfa;
  begin
    writeln( psout );
    errormsg;
    msg[1] := 'identifier';   msg[2] := 'procedures';
    msg[3] := 'reals     ';   msg[4] := 'arrays    ';
	msg[5] := 'levels    ';   msg[6] := 'code      ';
    msg[7] := 'strings   ';
	writeln( psout, 'compiler table for ', msg[n], ' is too small');
    exit; {terminate compilation }
  end { fatal };

procedure insymbol;  {reads next symbol}	{*读取下一个单词符号,处理注释行*}
  label 1,2,3;	{*定义label,为go to的使用做准备*}
  var  i,j,k,e: integer;
  procedure readscale; {*处理实数的指数部分*}
    var s,sign: integer;
    begin
      nextch;
      sign := 1;	{*正负标识,1为正,-1为负*}
      s := 0;
      if ch = '+'	{*如果读到的是'+',不做处理*}
      then nextch
      else if ch = '-'
           then begin
                  nextch;
                  sign := -1
                end;
      if not(( ch >= '0' )and (ch <= '9' ))	{*如果符号后面跟的不是数字则报错*}
      then error( 40 )	{*小数点后没有数字*}
      else repeat	{*把数字存到s中*}
           s := 10*s + ord( ord(ch)-ord('0'));
           nextch;
           until not(( ch >= '0' ) and ( ch <= '9' ));
      e := s*sign + e
    end { readscale };

  procedure adjustscale;		{*根据小数位数和指数大小求出实数数值*}
    var s : integer;
        d, t : real;
    begin
      if k + e > emax			{*当前的位数加上指数超过上限则报错*}
      then error(21)
      else if k + e < emin
           then rnum := 0		{*精度不够了直接记为零*}
      else begin
            s := abs(e);
            t := 1.0;
            d := 10.0;
            repeat
				while not odd(s) do		{*把偶次幂先用平方处理完*}
                  begin
                    s := s div 2;		{*除法取整*}
                    d := sqr(d)			{*d = d的平方*}
                  end;
                s := s - 1;
                t := d * t
            until s = 0;			{*把指数e转换成2N+1或者2N的形式, t此时为10的e次方*}
			if e >= 0
            then rnum := rnum * t	{*e大于零就乘10的e次方,反之则除*}
            else rnum := rnum / t
		   end
    end { adjustscale };

  procedure options;	{*处理编译时的可选项*}
    procedure switch( var b: boolean );	{*处理编译可选项中的“+”,“-”号*}
      begin
        b := ch = '+';
        if not b
        then if not( ch = '-' )
             then begin { print error message }		{*如果ch既不是加号也不是减号则输出错误信息*}
                    while( ch <> '*' ) and ( ch <> ',' ) do		{*跳过无用符号*}
                      nextch;
                  end
             else nextch
        else nextch
      end { switch };
    begin { options  }
      repeat
        nextch;
        if ch <> '*'		{*编译选项为*$t+,s+*的形式}
        then begin
               if ch = 't'	{*表示打印相关的操作*}
               then begin
                      nextch;
                      switch( prtables )	{*根据符号判断是否打印表格,设置prtable的值*}
                    end
               else if ch = 's'		{*设置是否需要在出错时现场卸除打印*}
                  then begin
                          nextch;
                          switch( stackdump )
                       end;

             end
      until ch <> ','
    end { options };
  begin { insymbol  }
  1: while( ch = ' ' ) or ( ch = chr(9) ) do	{*跳过所有的空格和\t*}
       nextch;    { space & htab }
    case ch of
      'a','b','c','d','e','f','g','h','i',
      'j','k','l','m','n','o','p','q','r',
      's','t','u','v','w','x','y','z':
        begin { identifier of wordsymbol }
          k := 0;
          id := '          ';
          repeat
            if k < alng
            then begin
                   k := k + 1;
                   id[k] := ch
                 end;
            nextch
          until not((( ch >= 'a' ) and ( ch <= 'z' )) or (( ch >= '0') and (ch <= '9' )));	{*取名字放到id中*}
          i := 1;
          j := nkw; { binary search }	{*开始二分表查找id在key_words表中的位置*}
          repeat
            k := ( i + j ) div 2;
            if id <= key[k]
            then j := k - 1;
            if id >= key[k]
            then i := k + 1;
          until i > j;
          if i - 1 > j
          then sy := ksy[k]		{*获取id对应的sym*}
          else sy := ident		{*没有找到则为标识符*}
        end;
      '0','1','2','3','4','5','6','7','8','9':	{*开始数字识别*}
        begin { number }
          k := 0;
          inum := 0;
          sy := intcon;		{*设置sy为intcon表示数字*}
		  repeat
            inum := inum * 10 + ord(ch) - ord('0');		{*把小数点或者e前面的数读完存到inum中*}
			k := k + 1;		{*统计整数部分的位数*}
            nextch
          until not (( ch >= '0' ) and ( ch <= '9' ));
          if( k > kmax ) or ( inum > nmax )		{*超出上限报错*}
          then begin
                 error(21);
                 inum := 0;
                 k := 0
               end;
          if ch = '.'	{*读小数*}
          then begin
                 nextch;
                 if ch = '.'
                 then ch := ':'
                 else begin
                        sy := realcon;
                        rnum := inum;
                        e := 0;		{*0.1被认为是10的-1次方,以此类推*}
                        while ( ch >= '0' ) and ( ch <= '9' ) do
						  begin
                            e := e - 1;
                            rnum := 10.0 * rnum + (ord(ch) - ord('0'));		{*把小数部分先当做整数来存*}
							nextch
                          end;
                        if e = 0	{*小数点后面没有数字则报错(没有进while)*}
                        then error(40);
                        if ch = 'e'			{*如果小数后面有e(科学计数法),则进行下面操作*}
                        then readscale;
                        if e <> 0 then adjustscale	{*算真正表示的数*}
                      end
                end
          else if ch = 'e'		{*处理科学计数法的指数部分*}
               then begin
					  sy := realcon;
                      rnum := inum;
                      e := 0;
					  readscale;
                      if e <> 0
                      then adjustscale
                    end;
        end;
      ':':	{*处理冒号并判断是否为:=赋值语句,以下类似*}
        begin
          nextch;
          if ch = '='
          then begin
                 sy := becomes;
                 nextch
               end
          else  sy := colon
         end;
      '<':
        begin
          nextch;
          if ch = '='
          then begin
                 sy := leq;
                 nextch
               end
          else
            if ch = '>'
            then begin
                   sy := neq;
                   nextch
                 end
            else  sy := lss
        end;
      '>':
        begin
          nextch;
          if ch = '='
          then begin
                 sy := geq;
                 nextch
               end
          else  sy := gtr
        end;
      '.':
        begin
          nextch;
          if ch = '.'
          then begin
                 sy := colon;	{*..算作和冒号一类,处理array[1..max]一类*}
                 nextch
               end
          else sy := period
        end;
      '''':   {*当前字符是否为单引号*}
        begin
          k := 0;
   2:     nextch;
          if ch = ''''
          then begin
                 nextch;
                 if ch <> ''''  {*如果不是三个连续的单引号*}
                 then goto 3
               end;
          if sx + k = smax  {*sx为stab的索引变量*}
          then fatal(7);    {*表溢出*}
          stab[sx+k] := ch;
          k := k + 1;
          if cc = 1   {*因为在nextch中当cc=ll后下一行开始cc=1*}
          then begin { end of line }
                 k := 0;
               end
          else goto 2;
   3:     if k = 1  {*引号之间只有一个字符*}
          then begin
                 sy := charcon;   {*sym类型为字符类型*}
                 inum := ord( stab[sx] )  {inum存储该字符的ASCII值}
               end
          else if k = 0   {*双引号中间没东西报错*}
               then begin
                      error(38);
                      sy := charcon;
                      inum := 0   {*编码值为0*}
                    end
               else begin
                      sy := stringcon;  {*类型为字符串类型*}
                      inum := sx;   {*如果是字符串则存储该字符的开始位置索引下标*}
                      sleng := k;
                      sx := sx + k
                    end
        end;
      '(':  {*处理注释部分*}
        begin
          nextch;
          if ch <> '*'
          then sy := lparent
          else begin { comment }
                 nextch;
                 if ch = '$'    {*处理可编译选项*}
                 then options;
                 repeat
                   while ch <> '*' do nextch;
                   nextch
                 until ch = ')';
                 nextch;
                 goto 1
               end
        end;
      '{':    {*处理注释行或者编译可选项*}
        begin
          nextch;
          if ch = '$'     {*{$是编译选项设置*}
          then options;
          while ch <> '}' do
            nextch;
          nextch;
          goto 1
        end;
      '+', '-', '*', '/', ')', '=', ',', '[', ']', ';': {*操作符直接处理*}
        begin
          sy := sps[ch];
          nextch
        end;
      '$','"' ,'@', '?', '&', '^', '!':   {*单独出现算错*}
        begin
          error(24);
          nextch;
          goto 1
        end
      end { case }
    end { insymbol };

procedure enter(x0:alfa; x1:objecttyp; x2:types; x3:integer );  {*(分程序外使用):把标准类型、过程和函数的名字登录到符号表*}
  begin
    t := t + 1;    { enter standard identifier }
    with tab[t] do
      begin
        name := x0;
        link := t - 1;
        obj := x1;
        typ := x2;
        ref := 0;
        normal := true;
        lev := 0;   {*主程序开始之前就登录了一些自带的,所以级别最高*}
        adr := x3;
      end
  end; { enter }

procedure enterarray( tp: types; l,h: integer );  {*登录数组信息向量表atab*}
  begin
    if l > h  {*下界大于上界*}
    then error(27);
    if( abs(l) > xmax ) or ( abs(h) > xmax )
    then begin
           error(27);
           l := 0;
           h := 0;
         end;
    if a = amax  {*表满了*}
    then fatal(4)
    else begin
           a := a + 1;
           with atab[a] do
             begin
               inxtyp := tp;  {*下标类型*}
               low := l;  {*上下界*}
               high := h
             end
         end
  end { enterarray };

procedure enterblock;   {*登录分程序表btab*}
  begin
    if b = bmax
    then fatal(2)
    else begin
           b := b + 1;
           btab[b].last := 0;   {*指向分程序中最后一个标识符在tab表中的位置*}
           btab[b].lastpar := 0;  {*指向过程或者函数的最后一个参数在tab表中的位置*}
         end
  end { enterblock };

procedure enterreal( x: real ); {*登录实常量表*}
  begin
    if c2 = c2max - 1
    then fatal(3)
    else begin
           rconst[c2+1] := x;
           c1 := 1;   {*循环用的局部变量*}
           while rconst[c1] <> x do
             c1 := c1 + 1;
           if c1 > c2
           then  c2 := c1   {*如果在c2之前就有该常量,则c1<=c2,于是c2不更新,否则c2更新*}
         end
  end { enterreal };

procedure emit( fct: integer );   {*这几个emit是用来生成pcode的,fct为操作码,这里为无操作数*}
  begin
    if lc = cmax      {*lc为code表的索引变量*}
    then fatal(6);
    code[lc].f := fct;
    lc := lc + 1
  end { emit };


procedure emit1( fct, b: integer ); {*一个操作数*}
  begin
    if lc = cmax
    then fatal(6);
    with code[lc] do
      begin
        f := fct;
        y := b;
      end;
    lc := lc + 1
  end { emit1 };

procedure emit2( fct, a, b: integer );  {*两个操作数*}
  begin
    if lc = cmax then fatal(6);
    with code[lc] do
      begin
        f := fct;
        x := a;
        y := b
      end;
    lc := lc + 1;
  end { emit2 };

procedure printtables;    {*打印表的过程*}
  var  i: integer;
       o: order;
      mne: array[0..omax] of
           packed array[1..5] of char;
  begin
    mne[0] := 'LDA  ';   mne[1] := 'LOD  ';  mne[2] := 'LDI  ';         {*p-code指令*}
    mne[3] := 'DIS  ';   mne[8] := 'FCT  ';  mne[9] := 'INT  ';
    mne[10] := 'JMP  ';   mne[11] := 'JPC  ';  mne[12] := 'SWT  ';
    mne[13] := 'CAS  ';   mne[14] := 'F1U  ';  mne[15] := 'F2U  ';
    mne[16] := 'F1D  ';   mne[17] := 'F2D  ';  mne[18] := 'MKS  ';
    mne[19] := 'CAL  ';   mne[20] := 'IDX  ';  mne[21] := 'IXX  ';
    mne[22] := 'LDB  ';   mne[23] := 'CPB  ';  mne[24] := 'LDC  ';
    mne[25] := 'LDR  ';   mne[26] := 'FLT  ';  mne[27] := 'RED  ';
    mne[28] := 'WRS  ';   mne[29] := 'WRW  ';  mne[30] := 'WRU  ';
    mne[31] := 'HLT  ';   mne[32] := 'EXP  ';  mne[33] := 'EXF  ';
    mne[34] := 'LDT  ';   mne[35] := 'NOT  ';  mne[36] := 'MUS  ';
    mne[37] := 'WRR  ';   mne[38] := 'STO  ';  mne[39] := 'EQR  ';
    mne[40] := 'NER  ';   mne[41] := 'LSR  ';  mne[42] := 'LER  ';
    mne[43] := 'GTR  ';   mne[44] := 'GER  ';  mne[45] := 'EQL  ';
    mne[46] := 'NEQ  ';   mne[47] := 'LSS  ';  mne[48] := 'LEQ  ';
    mne[49] := 'GRT  ';   mne[50] := 'GEQ  ';  mne[51] := 'ORR  ';
    mne[52] := 'ADD  ';   mne[53] := 'SUB  ';  mne[54] := 'ADR  ';
    mne[55] := 'SUR  ';   mne[56] := 'AND  ';  mne[57] := 'MUL  ';
    mne[58] := 'DIV  ';   mne[59] := 'MOD  ';  mne[60] := 'MUR  ';
    mne[61] := 'DIR  ';   mne[62] := 'RDL  ';  mne[63] := 'WRL  ';

    writeln(psout);
    writeln(psout);
    writeln(psout);
    writeln(psout,'   identifiers  link  obj  typ  ref  nrm  lev  adr');
    writeln(psout);
    for i := btab[1].last to t do
      with tab[i] do
        writeln( psout, i,' ', name, link:5, ord(obj):5, ord(typ):5,ref:5, ord(normal):5,lev:5,adr:5);
    writeln( psout );
    writeln( psout );
    writeln( psout );
    writeln( psout, 'blocks   last  lpar  psze  vsze' );
    writeln( psout );
    for i := 1 to b do
       with btab[i] do
         writeln( psout, i:4, last:9, lastpar:5, psize:5, vsize:5 );
    writeln( psout );
    writeln( psout );
    writeln( psout );
    writeln( psout, 'arrays xtyp etyp eref low high elsz size');
    writeln( psout );
    for i := 1 to a do
      with atab[i] do
        writeln( psout, i:4, ord(inxtyp):9, ord(eltyp):5, elref:5, low:5, high:5, elsize:5, size:5);
    writeln( psout );
    writeln( psout );
    writeln( psout );
    writeln( psout, 'code:');
    writeln( psout );
    for i := 0 to lc-1 do
      begin
        write( psout, i:5 );
        o := code[i];
        write( psout, mne[o.f]:8, o.f:5 );
        if o.f < 31
        then if o.f < 4
             then write( psout, o.x:5, o.y:5 )
             else write( psout, o.y:10 )
        else write( psout, '          ' );
        writeln( psout, ',' )
      end;
    writeln( psout );
    writeln( psout, 'Starting address is ', tab[btab[1].last].adr:5 )
  end { printtables };

{*到2075行block才结束*}
procedure block( fsys: symset; isfun: boolean; level: integer );  {*处理分析分程序*}
  type conrec = record    {*根据不同的type类型保存不同样式的数据*}
                  case tp: types of
                    ints, chars, bools : ( i:integer );
                    reals :( r:real )
                end;
  var dx : integer ;  { data allocation index }
      prt: integer ;  { t-index of this procedure }
      prb: integer ;  { b-index of this procedure }
      x  : integer ;

  procedure skip( fsys:symset; n:integer);    {*跳过错误的代码段,直到取出来的符号等于给定的符号集*}
    begin
      error(n);
      skipflag := true;
      while not ( sy in fsys ) do
        insymbol;
      if skipflag then endskip
    end { skip };

  procedure test( s1,s2: symset; n:integer );  {*测试当前符号是否合法,若不合法,打印出错标志并进行跳读*}
    begin
      if not( sy in s1 )
      then skip( s1 + s2, n )
    end { test };

  procedure testsemicolon;  {*检查分号是否合法*}
    begin
      if sy = semicolon
      then insymbol
      else begin
             error(14);
             if sy in [comma, colon]
             then insymbol
           end;
      test( [ident] + blockbegsys, fsys, 6 )
    end { testsemicolon };


  procedure enter( id: alfa; k:objecttyp ); {*登录分程序说明部分出现的名字到tab*}
    var j,l : integer;
    begin
      if t = tmax   {*表满报错*}
      then fatal(1)
      else begin
             tab[0].name := id;     {*后面的循环判断用,要不while停不下来*}
             j := btab[display[level]].last;    {*获取当前分程序层最后一个标识符在tab表中的位置*}
             l := j;
             while tab[j].name <> id do {*不断根据link向前遍历,仅限于当前分程序层*}
               j := tab[j].link;
             if j <> 0
             then error(1)      {*已经在符号表中有记载了,重复定义*}
             else begin
                    t := t + 1;
                    with tab[t] do
                      begin
                        name := id;
                        link := l;
                        obj := k;
                        typ := notyp;
                        ref := 0;
                        lev := level;
                        adr := 0;
                        normal := false { initial value }
                      end;
                    btab[display[level]].last := t    {*更新当前分程序层最后一个标识符在tab表中的位置*}
                  end
           end
    end { enter };

  function loc( id: alfa ):integer;   {*查找标识符id在tab中的位置并返回*}
    var i,j : integer;        { locate if in table }
    begin
      i := level;   {*i为当前分程序层*}
      tab[0].name := id;  { sentinel }
      repeat
        j := btab[display[i]].last;
        while tab[j].name <> id do
          j := tab[j].link;
        i := i - 1;
      until ( i < 0 ) or ( j <> 0 );    {*当前层没有则往前再找一层,直到找到(j<>0)或者没有(i<0)*}
      if j = 0
      then error(0);  {*没找到,报错*}
      loc := j
    end { loc } ;

  procedure entervariable;    {*将变量名登录到符号表*}
    begin
      if sy = ident
      then begin
             enter( id, vvariable );
             insymbol
           end
      else error(2)
    end { entervariable };

  procedure constant( fsys: symset; var c: conrec );  {*处理程序中出现的常量,并由参数(c)返回该常量的类型和数值*}
    var x, sign : integer;
    begin
      c.tp := notyp;
      c.i := 0;
      test( constbegsys, fsys, 50 );
      if sy in constbegsys
      then begin
             if sy = charcon    {*如果常量是字符类型*}
             then begin
                    c.tp := chars;
                    c.i := inum;  {*存储的是该字符的ascii码值*}
                    insymbol
                  end
             else begin
                  sign := 1;    {*用于常量的正负号*}
                  if sy in [plus, minus]    {* + or - *}
                  then begin
                         if sy = minus
                         then sign := -1;
                         insymbol
                       end;
                  if sy = ident     {*遇到标识符*}
                  then begin
                         x := loc(id);    {*找到常量标识符在tab中的位置*}
                         if x <> 0
                         then
                           if tab[x].obj <> konstant  {*如果id对应的符号种类不是常量则报错*}
                           then error(25)
                           else begin
                                  c.tp := tab[x].typ; {*获得常量的类型*}
                                  if c.tp = reals
                                  then c.r := sign*rconst[tab[x].adr]   {*从符号表中找到常量标识符在rconst中的位置从而找到其具体的值*}
                                  else c.i := sign*tab[x].adr
                                end;
                         insymbol
                       end
                  else if sy = intcon   {*遇到整数*}
                       then begin
                              c.tp := ints;
                              c.i := sign*inum;
                              insymbol
                            end
                  else if sy = realcon  {*遇到实数*}
                        then begin
                              c.tp := reals;
                              c.r := sign*rnum;
                              insymbol
                            end
                  else skip(fsys,50)
                end;
                test(fsys,[],6)
           end
    end { constant };

  procedure typ( fsys: symset; var tp: types; var rf,sz:integer );  {*处理类型描述,由参数得到它的类型(tp),指向类型详细信息表的指针(ref)和数组大小(arsz)*}
    var eltp : types; {*元素类型*}
        elrf, x : integer;
        elsz, offset, t0, t1 : integer;

    procedure arraytyp( var aref, arsz: integer );{*登录数组类型到atab并返回数组的登录位置和数组大小*}
      var eltp : types;   {*数组内的数据类型*}
         low, high : conrec;  {*数组编号(index)的上下界*}
         elrf, elsz: integer; {*记录ref和size方便返回*}
      begin
        constant( [colon, rbrack, rparent, ofsy] + fsys, low ); {*获得数组下界*}
        if low.tp = reals   {*实数上下界非法*}
        then begin
               error(27);
               low.tp := ints;
               low.i := 0
             end;
        if sy = colon   {*constant结束后读入了下一个sym,下界后面跟".."，其类型为colon*}
        then insymbol
        else error(13);
        constant( [rbrack, comma, rparent, ofsy ] + fsys, high );
        if high.tp <> low.tp  {*上下界类型不一致*}
        then begin
               error(27);
               high.i := low.i
             end;
        enterarray( low.tp, low.i, high.i );  {*将数组信息登录到atab中*}
        aref := a;  {*获得该数组在atab中的索引值*}
        if sy = comma {*后面接逗号说明是多维数组*}
        then begin
               insymbol;
               eltp := arrays;  {*数组中每个元素类型都是数组*}
               arraytyp( elrf, elsz )   {*递归调用*}
             end
        else begin
               if sy = rbrack {*右中括号处理*}
               then insymbol
               else begin
                      error(12);
                      if sy = rparent {*如果是右括号则容错*}
                      then insymbol
                    end;
               if sy = ofsy {*获取of关键字*}
               then insymbol
               else error(8);
               typ( fsys, eltp, elrf, elsz )  {*处理当前的符号类型,在typ里面更改eltp、elrf、elsz*}
             end;
             with atab[aref] do   {*记录数组相关信息到atab表*}
               begin
                 arsz := (high-low+1) * elsz;
                 size := arsz;
                 eltyp := eltp;
                 elref := elrf;
                 elsize := elsz
               end
      end { arraytyp };
    begin { typ  }
      tp := notyp;
      rf := 0;  {*ref,符号在符号表的位置*}
      sz := 0;  {*符号的大小*}
      test( typebegsys, fsys, 10 ); {*测试当前符号是否为数组类型的开始说明符*}
      if sy in typebegsys
      then begin
             if sy = ident  {*现在的符号是标识符*}
             then begin
                    x := loc(id);   {*当前标识符在符号表中的位置*}
                    if x <> 0
                    then with tab[x] do
                           if obj <> typel  {*当前标识符不是类型标识符(typel)则报错*}
                           then error(29)
                           else begin
                                  tp := typ;
                                  rf := ref;
                                  sz := adr;  {*获得其在运行栈中分配的存储空间*}
                                  if tp = notyp
                                  then error(30)
                                end;
                    insymbol
                  end
             else if sy = arraysy {*如果是数组类型*}
                  then begin
                         insymbol;
                         if sy = lbrack
                         then insymbol
                         else begin
                                error(11);
                                if sy = lparent {*左小括号也容错*}
                                then insymbol
                              end;
                         tp := arrays;  {*类型为数组类型*}
                         arraytyp(rf,sz)  {*登录数组类型*}
                         end
             else begin { records } {*否则一定为records类型,因为在main函数中typebegsys只包含ident,arraysy和record三种类型*}
                    insymbol;
                    enterblock; {*登录子程序*}
                    tp := records;
                    rf := b;  {*rf指向block表中的位置*}
                    if level = lmax {*当前嵌套层次达到最大*}
                    then fatal(5);
                    level := level + 1;   {*处理记录类型时,进入新的一层*}
                    display[level] := b;  {*设置当前层次的display区*}
                    offset := 0;
                    while not ( sy in fsys - [semicolon,comma,ident]+ [endsy] ) do  {*end之前都是记录类型变量内的变量声明*}
                      begin { field section } {*开始处理record内部的成员变量*}
                        if sy = ident
                        then begin
                               t0 := t;   {*获取当前tab指针的位置*}
                               entervariable; {*将变量名登录到符号表,其内部enter后面有一个insymbol*}
                               while sy = comma do    {*record的同种变量之间由逗号分隔*}
                                 begin
                                   insymbol;
                                   entervariable
                                 end;
                               if sy = colon  {*变量后面跟着冒号,没有则报错*}
                               then insymbol
                               else error(5);
                               t1 := t;   {*获取当前tab的最新索引*}
                               typ( fsys + [semicolon, endsy, comma,ident], eltp, elrf, elsz );   {*对于record类型进行递归调用typ进行记录*}
                               while t0 < t1 do   {*填写t0到t1之间的变量,其为一行的记录所以大小是一样的*}
                               begin
                                 t0 := t0 + 1;
                                 with tab[t0] do
                                   begin
                                     typ := eltp;   {*eltp来自上面的typ递归调用*}
                                     ref := elrf;
                                     normal := true;  {*所有normal的初值都为false*}
                                     adr := offset;   {*获得变量相对于起始地址的偏移量*}
                                     offset := offset + elsz  {*更新offset*}
                                   end
                               end
                             end; { sy = ident }
                        if sy <> endsy
                        then begin
                               if sy = semicolon  {*一行处理完之后检查是否为冒号,不是报错,若是',则容错*}
                               then insymbol
                               else begin
                                      error(14);
                                      if sy = comma
                                      then insymbol
                                    end;
                                    test( [ident,endsy, semicolon],fsys,6 ) {*开启下一行处理时检验当前符号是否合法*}
                             end
                      end; { field section }
                    btab[rf].vsize := offset;   {*offset记录了其在S栈中所占的存储单元总数*}
                    sz := offset;
                    btab[rf].psize := 0;  {*该程序块的参数占用空间为0,因为record类型并不是真正的过程,没有参数*}
                    insymbol;
                    level := level - 1    {*record处理结束后level降一层*}
                  end; { record }
             test( fsys, [],6 ) {*检查当前sym是否合法*}
           end;
      end { typ };

  procedure parameterlist; { formal parameter list  }   {*处理过程或者函数说明中的形参表,将形参及其有关信息登录到符号表中*}
    var tp : types;
        valpar : boolean;
        rf, sz, x, t0 : integer;
    begin
      insymbol;
      tp := notyp;
      rf := 0;    {*初始化符号表的位置*}
      sz := 0;    {*初始化元素的大小*}
      test( [ident, varsy], fsys+[rparent], 7 );
      while sy in [ident, varsy] do   {*当前符号是标识符或则var关键字*}
        begin
          if sy <> varsy
          then valpar := true   {*值形参*}
          else begin
                 insymbol;
                 valpar := false
               end;
          t0 := t;    {*tab表的索引位置*}
          entervariable;
          while sy = comma do   {*识别到逗号说明还有同类型的参数*}
            begin
              insymbol;
              entervariable;
            end;
          if sy = colon   {*等于冒号则开始处理类型*}
          then begin
                 insymbol;
                 if sy <> ident
                 then error(2)
                 else begin
                        x := loc(id);
                        insymbol;
                        if x <> 0
                        then with tab[x] do
                          if obj <> typel
                          then error(29)
                          else begin
                                 tp := typ;
                                 rf := ref;
                                 if valpar
                                 then sz := adr  {*获得当前形参在符号表的位置*}
                                 else sz := 1   {*不是值形参则将其置为1(在这篇代码中,变量形参的大小都设置为了1)*}
                               end;
                      end;
                 test( [semicolon, rparent], [comma,ident]+fsys, 14 )
                 end
          else error(5);
          while t0 < t do {*同一类型的则将属性都填写完整*}
            begin
              t0 := t0 + 1;
              with tab[t0] do
                begin
                  typ := tp;
                  ref := rf;
                  adr := dx;
                  lev := level;
                  normal := valpar;
                  dx := dx + sz   {*block中的变量存储索引更新*}
                end
            end;
            if sy <> rparent  {*如果变量声明结束之后不是右括号则报错*}
            then begin
                   if sy = semicolon
                   then insymbol
                   else begin
                          error(14);
                          if sy = comma   {*对逗号进行容错处理*}
                          then insymbol
                        end;
                        test( [ident, varsy],[rparent]+fsys,6)
                 end
        end { while };
      if sy = rparent   {*函数或过程声明的参数列表结束*}
      then begin
             insymbol;
             test( [semicolon, colon],fsys,6 )
           end
      else error(4)
    end { parameterlist };


  procedure constdec; {*处理常量定义,将常量名及其相应信息填入符号表*}
    var c : conrec;
    begin
      insymbol;
      test([ident], blockbegsys, 2 );
      while sy = ident do   {*当获得的是标志符则进行循环*}
        begin
          enter(id, konstant);  {*入表,类型为kconstant表示常量*}
          insymbol;
          if sy = eql   {*等号,有赋值符号容错*}
          then insymbol
          else begin
                 error(16);
                 if sy = becomes
                 then insymbol
               end;
          constant([semicolon,comma,ident]+fsys,c);   {*获得常量的数值和类型*}
          tab[t].typ := c.tp;   {*将常量填表*}
          tab[t].ref := 0;
          if c.tp = reals   {*实型和整型的操作不同*}
          then begin
                enterreal(c.r);
                tab[t].adr := c1;   {*c1在enterreal中进行改变和处理,其代表的是该实常量在rconst表中的实际位置*}
              end
          else tab[t].adr := c.i;
               testsemicolon
        end    {*end of while*}
    end { constdec };

  procedure typedeclaration;  {*处理类型定义,并将类型名及相应信息填入符号表*}
    var tp: types;
        rf, sz, t1 : integer;
    begin
      insymbol;
      test([ident], blockbegsys,2 );  {*检查获取到的是不是标识符*}
      while sy = ident do
        begin
          enter(id, typel);
          t1 := t;
          insymbol;
          if sy = eql   {*赋值符号识别与容错*}
          then insymbol
          else begin
                 error(16);
                 if sy = becomes
                 then insymbol
               end;
          typ( [semicolon,comma,ident]+fsys, tp,rf,sz );
          with tab[t1] do   {*将typ的返回值填表*}
            begin
              typ := tp;
              ref := rf;
              adr := sz
            end;
          testsemicolon
        end
    end { typedeclaration };

  procedure variabledeclaration;  {*处理变量类型,并将变量名及其相应信息填入符号表*}
    var tp : types;
        t0, t1, rf, sz : integer;
    begin
      insymbol;
      while sy = ident do
        begin
          t0 := t;
          entervariable;
          while sy = comma do {*对t1,t2,t3这种循环处理*}
            begin
              insymbol;
              entervariable;
            end;
          if sy = colon
          then insymbol
          else error(5);
          t1 := t;
          typ([semicolon,comma,ident]+fsys, tp,rf,sz ); {*获得类型地址和大小*}
          while t0 < t1 do  {*对一行的变量循环填表*}
            begin
              t0 := t0 + 1;
              with tab[t0] do
                begin
                  typ := tp;
                  ref := rf;
                  lev := level;
                  adr := dx;
                  normal := true;
                  dx := dx + sz
                end
            end;
          testsemicolon
        end
    end { variabledeclaration };

  procedure procdeclaration;  {*处理过程或函数声明,将过程(函数)名填入符号表,递归调用block分析处理程序*}
    var isfun : boolean;  {*是否是function*}
    begin
      isfun := sy = funcsy;
      insymbol;
      if sy <> ident
      then begin
             error(2);
             id :='          '
           end;
      if isfun
      then enter(id,funktion)
      else enter(id,prozedure);
      tab[t].normal := true;
      insymbol;
      block([semicolon]+fsys, isfun, level+1 );
      if sy = semicolon
      then insymbol
      else error(14);
      emit(32+ord(isfun)) {exit}    {*推出过程/函数的P-code指令*}
    end { proceduredeclaration };


  procedure statement( fsys:symset ); {*分析处理各种语句*}
    var i : integer;

    procedure expression(fsys:symset; var x:item); forward; {*分析处理表达式,由参数(x)返回求值结果的类型*}
    procedure selector(fsys:symset; var v:item);  {*处理结构变量:数组下标变量或记录成员变量*}
      var x : item;
        a,j : integer;
      begin { sy in [lparent, lbrack, period] }   {*当前的符号应该是左括号等等*}
        repeat
          if sy = period  {*如果当前的符号是'.'(因为引用成员变量的方式为'记录名.成员名'),因此识别到'.'之后应该开始处理后面的结构名称*}
          then begin
                insymbol; { field selector }
                if sy <> ident  {*如果获取到的不是标识符则报错*}
                then error(2)
                else begin
                      if v.typ <> records   {*如果处理的不是记录类型则报错*}
                      then error(31)
                      else begin { search field identifier }
                              j := btab[v.ref].last;    {*获得该结构体在符号表中最后一个符号的位置*}
                              tab[0].name := id;
                              while tab[j].name <> id do  {*在符号表中查找该id*}
                                j := tab[j].link;
                              if j = 0    {*符号未声明*}
                              then error(0);
                              v.typ := tab[j].typ;
                              v.ref := tab[j].ref;  {*记录其在btab中的指针值*}
                              a := tab[j].adr;    {*记录该变量对record变量起始地址的相对位移*}
                              if a <> 0     {*如果相对位移不为0则生成一条指令来计算此位移*}
                              then emit1(9,a)
                          end;
                      insymbol
                    end
              end
          else begin { array selector }   {*处理数组下标*}
                if sy <> lbrack   {*如果不是左括号则报错*}
                then error(11);
                repeat               {*此处循环是为了满足处理多维数组的需要*}
                    insymbol;
                    expression( fsys+[comma,rbrack],x);   {*处理表达式,例如array[6+i]*}
                    if v.typ <> arrays  {*如果传入的类型不是数组则报错*}
                    then error(28)
                    else begin
                            a := v.ref; {*从v中获得该数组在atab中的位置*}
                            if atab[a].inxtyp <> x.typ  {*如果传入的下标类型和atab中记录的数组下标类型不符则报错*}
                            then error(26)
                            else if atab[a].elsize = 1  {*如果是变量形参(指针)*}
                                 then emit1(20,a)  {*IDX,取下标变量地址,长度为1*}
                            else emit1(21,a); {*IXX,取下标变量地址*}
                            v.typ := atab[a].eltyp;
                            v.ref := atab[a].elref
                        end
                until sy <> comma;  {*直到没有遇到逗号终止循环*}
                if sy = rbrack
                then insymbol
                else begin
                        error(12);
                        if sy = rparent   {*对右括号容错处理*}
                        then insymbol
                    end
              end
        until not( sy in[lbrack, lparent, period]);
        test( fsys,[],6)
      end { selector };

    procedure call( fsys: symset; i:integer );  {*处理非标准的过程或者函数调用,其中i表示需要调用的过程或者函数名在符号表中的位置*}
      var x : item;   {*代表传进来的参数结构体*}
          lastp,cp,k : integer;
      begin
        emit1(18,i); { mark stack } {*生成一条标记栈指令*}
        lastp := btab[tab[i].ref].lastpar;  {*获取该过程或函数最后一个参数在tab表中的位置,用来后面判断参数是否处理完*}
        cp := i;    {*记录当前被调用函数或者过程在符号表中的位置*}     {*cp 到 lastp 之间是tab表中形参列表,若是在循环中cp > latp则表示实参与形参个数不一致*}
        if sy = lparent
        then begin { actual parameter list }  {*如果识别到左括号则开始进行被调用过程的参数处理*}
               repeat
                 insymbol;
                 if cp >= lastp
                 then error(39)
                 else begin
                        cp := cp + 1;
                        if tab[cp].normal  {*如果normal值为真,则表示传入的是值形参或者其他参数*}
                        then begin { value parameter }  {*开始处理值形参*}
                               expression( fsys+[comma, colon,rparent],x);
                               if x.typ = tab[cp].typ   {*实际传参类型与记录的参数类型如果相同*}
                               then begin
                                      if x.ref <> tab[cp].ref {*表达式指向的btab表或atab表中位置与符号表记录中的位置不同,应该是数组或者记录的形参与实参不一致？*}
                                      then error(36)
                                      else if x.typ = arrays
                                           then emit1(22,atab[x.ref].size)
                                           else if x.typ = records
                                                then emit1(22,btab[x.ref].vsize)
                                    end
                               else if ( x.typ = ints ) and ( tab[cp].typ = reals ) {*如果传入的是整型,而形参为实数型*}
                                    then emit1(26,0)
                               else if x.typ <> notyp   {*？？？？*}
                                    then error(36);
                             end
                        else begin { variable parameter }   {*处理变量形参*}
                               if sy <> ident   {*如果传进来的不是标识符则报错*}
                               then error(2)
                               else begin
                                      k := loc(id);   {*找到其在tab中的位置*}
                                      insymbol;
                                      if k <> 0
                                      then begin
                                             if tab[k].obj <> vvariable   {*如果传进去的参数不是变量类型则报错*}
                                             then error(37);
                                             x.typ := tab[k].typ;
                                             x.ref := tab[k].ref;
                                             if tab[k].normal   {*传进来的指针指的是否是一个指针*}
                                             then emit2(0,tab[k].lev,tab[k].adr)    {*传进来的指针指的是一个指针*}
                                             else emit2(1,tab[k].lev,tab[k].adr);
                                             if sy in [lbrack, lparent, period]   {*后面跟的可以是做中括号(数组下标),左括号(容错)或句号(对应记录)*}
                                             then selector(fsys+[comma,colon,rparent],x);
                                             if ( x.typ <> tab[cp].typ ) or ( x.ref <> tab[cp].ref )
                                             then error(36)
                                           end
                                    end
                             end {variable parameter }
                      end;
                 test( [comma, rparent],fsys,6)
               until sy <> comma; {*循环直到处理完逗号*}
               if sy = rparent
               then insymbol
               else error(4)
             end;
        if cp < lastp {*实参小于形参数*}
        then error(39); { too few actual parameters }
        emit1(19,btab[tab[i].ref].psize-1 );  {*生成19号CAL指令,正式开始过程或者函数调用*}
        if tab[i].lev < level     {*如果函数名符号所在层次小于当前层次则更新display区*}
        then emit2(3,tab[i].lev, level )
      end { call };

    function resulttype( a, b : types) :types;  {*处理整型或实型两个操作数运算时的类型转换(a + b = c, 根据a 和 b 判断c的类型)*}
      begin
        if ( a > reals ) or ( b > reals )   {*该算数表达式的类型不合法*}
        then begin
               error(33);
               resulttype := notyp    {*返回nottype*}
             end
        else if ( a = notyp ) or ( b = notyp )
             then resulttype := notyp
        else if a = ints  {*a 和 b 有一个real类型则结果为real类型*}
             then if b = ints
                  then resulttype := ints
                  else begin
                         resulttype := reals;
                         emit1(26,1)
                      end
        else begin
             resulttype := reals;
             if b = ints
             then emit1(26,0)
            end
      end { resulttype } ;

    procedure expression( fsys: symset; var x: item );  {*处理表达式,由x返回求值结果的类型*}
      var y : item;
          op : symbol;

      procedure simpleexpression( fsys: symset; var x: item );  {*处理简单表达式(+、-、or),由参数x返回求值结果的类型*}
        var y : item;
            op : symbol;

        procedure term( fsys: symset; var x: item );  {*处理项,由参数返回结果类型*}
          var y : item;
              op : symbol;

          procedure factor( fsys: symset; var x: item );  {*处理因子,由参数返回结果类型*}
            var i,f : integer;

            procedure standfct( n: integer ); {*处理标准函数调用,传入标准函数的编号n,执行不同的操作*}
              var ts : typset;  {*类型集合*}
              begin  { standard function no. n }
                if sy = lparent {*如果当前符号不是左括号则报错*}
                then insymbol
                else error(9);
                if n < 17 {*如果标准函数编号小于17*}
                then begin
                       expression( fsys+[rparent], x );   {*递归调用处理表达式的过程来处理参数*}
                       case n of
                       { abs, sqr } 0,2: begin
                                           ts := [ints, reals];
                                           tab[i].typ := x.typ;
                                           if x.typ = reals   {*如果参数类型为实数则对应的函数标号+1*}
                                           then n := n + 1
                                         end;
                       { odd, chr } 4,5: ts := [ints];
                       { odr }        6: ts := [ints,bools,chars];
                       { succ,pred } 7,8 : begin
                                             ts := [ints, bools,chars];
                                             tab[i].typ := x.typ
                                           end;
                       { round,trunc } 9,10,11,12,13,14,15,16:
                       { sin,cos,... }     begin
                                             ts := [ints,reals];
                                             if x.typ = ints
                                             then emit1(26,0)   {*如果是整数则转换为浮点数*}
                                           end;
                     end; { case }
                     if x.typ in ts
                     then emit1(8,n)    {*FCT*}
                     else if x.typ <> notyp
                          then error(48);   {*该标准函数的参数类型不正确*}
                   end
                else begin { n in [17,18] }   {*eof 和 eoln 函数*}
                       if sy <> ident
                       then error(2)
                       else if id <> 'input    '
                            then error(0)   {*报0号错误,未知id*}
                            else insymbol;
                       emit1(8,n);
                     end;
                x.typ := tab[i].typ;
                if sy = rparent   {*标准函数调用结束*}
                then insymbol
                else error(4)
              end { standfct } ;
            begin { factor }
              x.typ := notyp;
              x.ref := 0;
              test( facbegsys, fsys,58 );
              while sy in facbegsys do
                begin
                  if sy = ident
                  then begin
                         i := loc(id);
                         insymbol;
                         with tab[i] do   {*对获取到的标识符在tab中的表项进行操作*}
                           case obj of
                             konstant: begin      {*如果是常量类型*}
                                         x.typ := typ;
                                         x.ref := 0;
                                         if x.typ = reals
                                         then emit1(25,adr)   {*装入浮点数*}
                                         else emit1(24,adr)   {*装入实数*}
                                        end;
                             vvariable:begin      {*如果是变量类型*}
                                         x.typ := typ;
                                         x.ref := ref;
                                         if sy in [lbrack, lparent,period]  {*如果该标识符变量后面紧跟'('、']'、'.'则说明该变量存在子结构*}
                                         then begin
                                                if normal
                                                then f := 0
                                                else f := 1;
                                                emit2(f,lev,adr);   {*变量形参装载地址而值形参装载值*}
                                                selector(fsys,x);   {*处理子结构得到真正的变量*}
                                                if x.typ in stantyps
                                                then emit(34)
                                              end
                                         else begin
                                                if x.typ in stantyps
                                                then if normal
                                                     then f := 1  {*标准类型的值形参进行取值操作*}
                                                     else f := 2  {*标准类型的变量形参进行间接取值操作*}
                                                else if normal
                                                     then f := 0  {*非标准类型的值形参取地址*}
                                                     else f := 1; {*非标准类型的变量形参取值  ？？？？*}
                                                emit2(f,lev,adr)
                                              end
                                       end;
                             typel,prozedure: error(44);    {*表达式中不能出现的类型或者过程标识符*}
                             funktion: begin   {*如果是函数符号*}
                                         x.typ := typ;
                                         if lev <> 0  {*层次为0则是标准函数,层次不为零则不是标准函数*}
                                         then call(fsys,i)
                                         else standfct(adr)
                                       end
                           end { case,with }
                       end
                  else if sy in [ charcon,intcon,realcon ]
                       then begin
                              if sy = realcon
                              then begin
                                     x.typ := reals;    {*返回的type设置为real类型*}
                                     enterreal(rnum);   {*将该实数入表*}
                                     emit1(25,c1)       {*装入实数*}
                                   end
                              else begin
                                     if sy = charcon
                                     then x.typ := chars
                                     else x.typ := ints;
                                     emit1(24,inum)   {*装入字面常量*}
                                   end;
                              x.ref := 0;
                              insymbol
                            end
                  else if sy = lparent  {*左括号则处理表达式*}
                            then begin
                                   insymbol;
                                   expression(fsys + [rparent],x);
                                   if sy = rparent
                                   then insymbol
                                   else error(4)
                                 end
                  else if sy = notsy    {*如果符号类型是not类型*}
                                  then begin
                                         insymbol;
                                         factor(fsys,x);
                                         if x.typ = bools {*如果返回类型是布尔型*}
                                         then emit(35)
                                         else if x.typ <> notyp
                                              then error(32)    {*not,and或or的操作数必须是boolean型*}
                                       end;
                  test(fsys,facbegsys,6)
                end { while }
            end { factor };
          begin { term   }
            factor( fsys + [times,rdiv,idiv,imod,andsy],x);   {第一个运算数x}
            while sy in [times,rdiv,idiv,imod,andsy] do  {*如果因子后面跟符号'*''/''div''mod''and',说明后面还有因子,进入循环*}
              begin
                op := sy;
                insymbol;
                factor(fsys+[times,rdiv,idiv,imod,andsy],y ); {*第二个运算数y*}
                if op = times   {*如果遇到了乘号*}
                then begin
                       x.typ := resulttype(x.typ, y.typ);
                       case x.typ of
                         notyp: ;
                         ints : emit(57); {*整型乘*}
                         reals: emit(60); {*实型乘*}
                       end
                     end
                else if op = rdiv {*除法运算,把x,y操作数都换成reals再进行实型除*}
                     then begin
                            if x.typ = ints
                            then begin
                                   emit1(26,1);   {*转换为浮点数*}
                                   x.typ := reals;
                                 end;
                            if y.typ = ints
                            then begin
                                   emit1(26,0);
                                   y.typ := reals;
                                 end;
                            if (x.typ = reals) and (y.typ = reals)
                            then emit(61) {*实型除*}
                            else begin
                                   if( x.typ <> notyp ) and (y.typ <> notyp)
                                   then error(33);  {*算术表达式类型不合法*}
                                   x.typ := notyp
                                 end
                          end
                else if op = andsy  {*与运算,操作数必须都是boolean类型*}
                     then begin
                          if( x.typ = bools )and(y.typ = bools)
                          then emit(56)
                          else begin
                               if( x.typ <> notyp ) and (y.typ <> notyp)
                               then error(32);
                               x.typ := notyp
                              end
                         end
                else begin { op in [idiv,imod] }
                                 if (x.typ = ints) and (y.typ = ints)
                                 then if op = idiv
                                      then emit(58) {*整型除*}
                                      else emit(59) {*取模*}
                                 else begin
                                        if ( x.typ <> notyp ) and (y.typ <> notyp)
                                        then error(34); {*div和mod运算的操作数必须是integer型*}
                                        x.typ := notyp
                                      end
                               end
              end { while }
          end { term };
        begin { simpleexpression }
          if sy in [plus,minus]   {*加号或者减号*}
          then begin
                 op := sy;
                 insymbol;
                 term( fsys+[plus,minus],x);
                 if x.typ > reals   {*类型是bools,chars,arrays, records,由于不是算数运算类型,报错*}
                 then error(33)
                 else if op = minus {*如果是减号则取相反数*}
                      then emit(36)
               end
          else term(fsys+[plus,minus,orsy],x);        {*在这之前获取操作数x*}
          while sy in [plus,minus,orsy] do
            begin
              op := sy;
              insymbol;
              term(fsys+[plus,minus,orsy],y);   {*获取操作数y*}
              if op = orsy  {*如果操作符是or*}
              then begin
                     if ( x.typ = bools )and(y.typ = bools)
                     then emit(51)
                     else begin
                            if( x.typ <> notyp) and (y.typ <> notyp)
                            then error(32);
                            x.typ := notyp
                          end
                   end
              else begin
                     x.typ := resulttype(x.typ,y.typ);
                     case x.typ of
                       notyp: ;
                       ints: if op = plus   {*整数加减*}
                             then emit(52)
                             else emit(53);
                       reals:if op = plus   {*实数加减*}
                             then emit(54)
                             else emit(55)
                     end { case }
                   end
            end { while }
          end { simpleexpression };
      begin { expression  }
        simpleexpression(fsys+[eql,neq,lss,leq,gtr,geq],x); {*操作数x*}
        if sy in [ eql,neq,lss,leq,gtr,geq]   {*多种数值比较符号*}
        then begin
               op := sy;
               insymbol;
               simpleexpression(fsys,y); {*操作数y*}
               if(x.typ in [notyp,ints,bools,chars]) and (x.typ = y.typ)  {*整型、布尔型和字符型都可以借用整型的运算*}
               then case op of        {*根据不同的符号生成不同的PCODE*}
                      eql: emit(45);
                      neq: emit(46);
                      lss: emit(47);
                      leq: emit(48);
                      gtr: emit(49);
                      geq: emit(50);
                    end
               else begin   {*都转换为reals类型进行操作*}
                      if x.typ = ints
                      then begin
                             x.typ := reals;
                             emit1(26,1)
                           end
                      else if y.typ = ints
                           then begin
                                  y.typ := reals;
                                  emit1(26,0)
                                end;
                      if ( x.typ = reals)and(y.typ=reals)
                      then case op of
                             eql: emit(39);
                             neq: emit(40);
                             lss: emit(41);
                             leq: emit(42);
                             gtr: emit(43);
                             geq: emit(44);
                           end
                      else error(35)
                    end;
               x.typ := bools
             end
      end { expression };

    procedure assignment( lv, ad: integer );  {*处理赋值语句*}
      var x,y: item;
          f  : integer;
      begin   { tab[i].obj in [variable,prozedure] }      {*当且仅当当前符号表的目标类型为变量或者过程型时*}
        x.typ := tab[i].typ;
        x.ref := tab[i].ref;
        if tab[i].normal
        then f := 0
        else f := 1;
        emit2(f,lv,ad);
        if sy in [lbrack,lparent,period]
        then selector([becomes,eql]+fsys,x);  {*处理下标*}
        if sy = becomes {*赋值符号并容错*}
        then insymbol
        else begin
               error(51);
               if sy = eql
               then insymbol
             end;
        expression(fsys,y); {*获得赋值符号右边的值*}
        if x.typ = y.typ
        then if x.typ in stantyps
             then emit(38)  {*STO*}
             else if x.ref <> y.ref
                  then error(46)  {*被赋值变量应该与表达式类型相同*}
                  else if x.typ = arrays  {*数组类型需要拷贝块*}
                       then emit1(23,atab[x.ref].size)  {*拷贝atab中的项*}
                       else emit1(23,btab[x.ref].vsize)   {*拷贝btab中的项*}
        else if(x.typ = reals )and (y.typ = ints)
        then begin    {*先转换为浮点数再赋值*}
               emit1(26,0);
               emit(38)
             end
        else if ( x.typ <> notyp ) and ( y.typ <> notyp )
             then error(46)
      end { assignment };

    procedure compoundstatement;  {*处理复合语句,循环来做*}
      begin
        insymbol;
        statement([semicolon,endsy]+fsys);
        while sy in [semicolon]+statbegsys do
          begin
            if sy = semicolon
            then insymbol
            else error(14);
            statement([semicolon,endsy]+fsys)
          end;
        if sy = endsy
        then insymbol
        else error(57)
      end { compoundstatement };

    procedure ifstatement;  {*处理if语句*}
      var x : item;
          lc1,lc2: integer;
      begin
        insymbol;
        expression( fsys+[thensy,dosy],x);
        if not ( x.typ in [bools,notyp])  {*如果表达式返回的类型不是boolean类型则报错*}
        then error(17);
        lc1 := lc;
        emit(11);  { jmpc }
        if sy = thensy
        then insymbol
        else begin
               error(52);
               if sy = dosy {*对缺少'then'符号进行容错*}
               then insymbol
             end;
        statement( fsys+[elsesy]);  {*处理满足if条件的分析语句*}
        if sy = elsesy
        then begin
               insymbol;
               lc2 := lc;
               emit(10);  {*jmp无条件转移*}
               code[lc1].y := lc;   {*设置if指令跳转的位置*}
               statement(fsys); {*处理else条件下的分析语句*}
               code[lc2].y := lc    {*设置else指令跳转的位置*}
             end
        else code[lc1].y := lc
      end { ifstatement };

    procedure casestatement;  {*处理case语句*}
      var x : item;
          i,j,k,lc1 : integer;  {*j用于exittab的索引下标*}
          casetab : array[1..csmax]of
                     packed record
                       val,lc : index
                     end;
          exittab : array[1..csmax] of integer;

      procedure caselabel;  {*处理case语句中的标号,将各标号对应的目标代码地址填入casetab表中,并检查符号有无重复定义*}
        var lab : conrec;
              k : integer;
        begin
          constant( fsys+[comma,colon],lab ); {*处理常量(因为标签都是常量)*}
          if lab.tp <> x.typ    {*如果获得的标签类型和变量的类型不符*}
          then error(47)  {*case语句中标号必须是与case子句表达式类型相同的常量*}
          else if i = csmax   {*如果可以声明的case达到了最大限度*}
               then fatal(6)
               else begin
                      i := i+1; {*casestatement的变量i为case总数*}
                      k := 0; {*用来检查是否重复定义的变量*}
                      casetab[i].val := lab.i;  {*保存新的case值*}
                      casetab[i].lc := lc;  {*保存新case后面代码的位置*}
                      repeat
                        k := k+1
                      until casetab[k].val = lab.i;
                      if k < i
                      then error(1); { multiple definition }
                    end
        end { caselabel };

      procedure onecase;  {*处理case语句中的一个分支*}
        begin
          if sy in constbegsys
          then begin
                 caselabel;
                 while sy = comma do  {*如果有逗号说明是一个case分支对应多个标签的情况*}
                   begin
                     insymbol;
                     caselabel
                   end;
                 if sy = colon  {*读到冒号说明label声明结束了*}
                 then insymbol
                 else error(5);
                 statement([semicolon,endsy]+fsys); {*处理冒号之后需要执行的代码*}
                 j := j+1;
                 exittab[j] := lc;  {*记录当前case分支结束的代码位置,即跳转指令的位置*}
                 emit(10) {*生成一条跳转指令结束这一分支*}
               end
        end { onecase };
      begin  { casestatement  }       {*case ...  (第一个case分支,再之后的就没有of了)of ...: begin .....end*}
        insymbol;
        i := 0;
        j := 0;
        expression( fsys + [ofsy,comma,colon],x );  {*获得case后面of前面变量类型*}
        if not( x.typ in [ints,bools,chars,notyp ])
        then error(23);
        lc1 := lc;  {*记录当前的位置指针*}
        emit(12); {jmpx}  {SWT指令,此时y值还未填}
        if sy = ofsy
        then insymbol
        else error(8);
        onecase;
        while sy = semicolon do {*分支的end后面有分号,说明还有更多的case分支*}
          begin
            insymbol;
            onecase
          end;
        code[lc1].y := lc;  {*确定了情况表的开始地址之后对之前声明的SWT代码进行回填*}
        for k := 1 to i do  {*便利case列表,建立情况表*}
          begin
            emit1( 13,casetab[k].val);  {*case每一个分支所对应的条件*}
            emit1( 13,casetab[k].lc); {*相对应的跳转地址*}
          end;
        emit1(10,0);  {*情况表结束*}
        for k := 1 to j do    {*设置每个case分支结束后的跳转地址,此时lc指向情况表结束之后的位置,所有的分支结束后都跳到这里*}
          code[exittab[k]].y := lc;
        if sy = endsy {*case的end结束*}
        then insymbol
        else error(57)
      end { casestatement };

    procedure repeatstatement;  {*处理repeat语句*}
      var x : item; {*用来获取返回值*}
          lc1: integer; {*用来记录repeat的开始位置*}
      begin
        lc1 := lc;
        insymbol;
        statement( [semicolon,untilsy]+fsys); {*处理repeat里面的循环体*}
        while sy in [semicolon]+statbegsys do {*如果遇到分号或者statement的开始符号,说明循环体中还有语句没有处理完*}
          begin
            if sy = semicolon
            then insymbol
            else error(14);
            statement([semicolon,untilsy]+fsys) {*处理循环体中的吓一跳语句*}
          end;
        if sy = untilsy {*遇到until关键字*}
        then begin  {*处理until后面的表达式,其返回类型必须是boolean类型*}
               insymbol;
               expression(fsys,x);
               if not(x.typ in [bools,notyp] )
               then error(17);
               emit1(11,lc1); {*跳转指令,如果表达式为假,则跳到repeat开始的位置继续循环执行*}
             end
        else error(53)
      end { repeatstatement };

    procedure whilestatement; {*处理while语句*}
      var x : item;
          lc1,lc2 : integer;
      begin
        insymbol;
        lc1 := lc;
        expression( fsys+[dosy],x);   {*处理while后面跟的表达式*}
        if not( x.typ in [bools, notyp] )
        then error(17);
        lc2 := lc;
        emit(11);
        if sy = dosy
        then insymbol
        else error(54);
        statement(fsys);  {*处理do后面的代码块*}
        emit1(10,lc1);
        code[lc2].y := lc   {*do之前的跳转指令,若为假则跳到do代码块的末尾*}
      end { whilestatement };

    procedure forstatement; {*处理for语句*}
      var  cvt : types;
             x :  item;
          i,f,lc1,lc2 : integer;
      begin
        insymbol;
        if sy = ident
        then begin
               i := loc(id);  {*找到其在tab表中的位置*}
               insymbol;
               if i = 0 {*如果没有找到这个标识符*}
               then cvt := ints {*计数变量类型默认为整型*}
               else if tab[i].obj = vvariable {*如果标识符对应的符号为变量类型*}
                    then begin
                           cvt := tab[i].typ; {*计数类型设置为这个类型*}
                           if not tab[i].normal {*如果是变量形参则报错*}
                           then error(37)
                           else emit2(0,tab[i].lev, tab[i].adr );
                           if not ( cvt in [notyp, ints, bools, chars])
                           then error(18)
                         end
               else begin
                    error(37);  {*应该是变量类型*}
                    cvt := ints
                   end
             end
        else skip([becomes,tosy,downtosy,dosy]+fsys,2); {*跳读中间的无用符号*}
        if sy = becomes {*识别到了赋值符号*}
        then begin
               insymbol;
               expression( [tosy, downtosy,dosy]+fsys,x); {*for a:= 6 + 1 to 10 do ... 此处处理6+1并将结果的类型返回*}
               if x.typ <> cvt  {*如果和a 的类型不符,则报错*}
               then error(19);
             end
        else skip([tosy, downtosy,dosy]+fsys,51);
        f := 14;    {*对应PCODE指令表中的f,默认为增长型*}
        if sy in [tosy,downtosy]
        then begin
               if sy = downtosy {*若为downto关键字,则将f改为减少型*}
               then f := 16;
               insymbol;
               expression([dosy]+fsys,x); {*处理 to 或者 downto 后面的表达式*}
               if x.typ <> cvt
               then error(19)
             end
        else skip([dosy]+fsys,55);
        lc1 := lc;  {*入口测试的指令地址*}
        emit(f);
        if sy = dosy
        then insymbol
        else error(54);
        lc2 := lc;  {*循环体进入之前的指令地址*}
        statement(fsys);  {*开始处理do里面的循环体*}
        emit1(f+1,lc2); {*再入口测试判断能否跳回循环体开始的指令进行再一次循环*}
        code[lc1].y := lc {*若进不了第一次入口测试则直接跳过循环体*}
        {*其实际的PCODE指令设计为for第一次判断和之后的判断用两个指令进行,再判断相当于do..while形式*}
      end { forstatement };

    procedure standproc( n: integer );  {*处理标准的输入输出的过程调用*}
      var i,f : integer;
          x,y : item;
      begin
        case n of
          1,2 : begin { read }
                  if not iflag
                  then begin
                         error(20); {*程序头部未包含参数“output”或“input”*}
                         iflag := true
                       end;
                  if sy = lparent
                  then begin
                         repeat   {*循环处理read后面括号里的参数*}
                           insymbol;
                           if sy <> ident
                           then error(2)
                           else begin
                                  i := loc(id);
                                  insymbol;
                                  if i <> 0
                                  then if tab[i].obj <> vvariable
                                       then error(37)
                                       else begin
                                              x.typ := tab[i].typ;
                                              x.ref := tab[i].ref;
                                              if tab[i].normal    {*指令处理过程中其操作的都是地址,装载值则直接将地址赋值,加载地址则根据地址再去找值*}
                                              then f := 0   {*对值形参加载地址,根据地址索引到S中的值,所以为加载地址*}
                                              else f := 1;  {*对变量形参加载值,即 a=adr,所以加载的地址直接赋值就好了,即指令为加载值*}
                                              emit2(f,tab[i].lev,tab[i].adr);
                                              if sy in [lbrack,lparent,period]  {*括号里参数是数组或者记录类型中的某一个值*}
                                              then selector( fsys+[comma,rparent],x);
                                              if x.typ in [ints,reals,chars,notyp]
                                              then emit1(27,ord(x.typ))
                                              else error(41)  {*read或write的参数类型不正确*}
                                            end
                                end;
                           test([comma,rparent],fsys,6);
                         until sy <> comma;
                         if sy = rparent  {*处理参数结束时的右括号*}
                         then insymbol
                         else error(4)
                       end;
                  if n = 2
                  then emit(62) {*readln*}
                end;
          3,4 : begin { write }
                  if sy = lparent
                  then begin
                         repeat   {*循环处理wriet列表中的参数值*}
                           insymbol;
                           if sy = stringcon  {*如果是字符串类型*}
                           then begin
                                  emit1(24,sleng);
                                  emit1(28,inum);
                                  insymbol
                                end
                           else begin
                                  expression(fsys+[comma,colon,rparent],x); {*处理write参数里面的表达式*}
                                  if not( x.typ in stantyps )
                                  then error(41);
                                  if sy = colon {*如果出现冒号继续处理,每一个输出参数后面有冒号的话,说明有格式化操作*}
                                  then begin
                                         insymbol;
                                         expression( fsys+[comma,colon,rparent],y);
                                         if y.typ <> ints {*一个冒号后面代表输出几个字符*}
                                         then error(43);  {*write语句的域宽应该是整型*}
                                         if sy = colon
                                         then begin
                                                if x.typ <> reals
                                                then error(42); {*该表达式应该是实型*}
                                                insymbol;
                                                expression(fsys+[comma,rparent],y);
                                                if y.typ <> ints
                                                then error(43);
                                                emit(37)
                                              end
                                         else emit1(30,ord(x.typ))
                                       end
                                  else emit1(29,ord(x.typ))
                               end{*end of else*}
                         until sy <> comma;
                         if sy = rparent
                         then insymbol
                         else error(4)
                       end;
                  if n = 4
                  then emit(63)
                end; { write }
        end { case };
      end { standproc } ;
    begin { statement }
      if sy in statbegsys+[ident] {*进行处理时分析第一个单词然后分别进不同的过程操作,对应课本330页的图*}
      then case sy of
             ident : begin
                       i := loc(id);
                       insymbol;
                       if i <> 0
                       then case tab[i].obj of
                              konstant,typel : error(45);  {*无法对常量进行赋值操作*}
                              vvariable:       assignment( tab[i].lev,tab[i].adr);  {*对变量则处理赋值语句*}
                              prozedure:       if tab[i].lev <> 0   {*调用过程*}
                                               then call(fsys,i)
                                               else standproc(tab[i].adr);
                              funktion:        if tab[i].ref = display[level]     {*对函数标识符也进行赋值操作？？？？*}
                                               then assignment(tab[i].lev+1,0)
                                               else error(45)
                            end { case }
                     end;
             beginsy : compoundstatement;
             ifsy    : ifstatement;
             casesy  : casestatement;
             whilesy : whilestatement;
             repeatsy: repeatstatement;
             forsy   : forstatement;
           end;  { case }
      test( fsys, [],14);
    end { statement };
  {*block块刚一进入开头不是function就是procdure,所以根据一个isfun传参便可确定*}
  begin  { block }
    dx := 5;    {*dx为变量存储的索引,初值为5是为了给分程序留出内务信息区*}
    prt := t;   {*获取当前符号表的位置*}
    if level > lmax {*如果当前子程序的层次已经超过了允许的最大层次*}
    then fatal(5);
    test([lparent,colon,semicolon],fsys,14);
    enterblock;   {*记录分程序信息*}
    prb := b;   {*获取分程序表的位置*}
    display[level] := b;  {*设置分程序索引表的相应值*}
    tab[prt].typ := notyp;
    tab[prt].ref := prb;
    if ( sy = lparent ) and ( level > 1 )
    then parameterlist;  {*处理形式参数表*}
    btab[prb].lastpar := t;
    btab[prb].psize := dx;  {*dx在paramaterlist过程里面也进行了改变,在5的基础上增加了形参的总大小*}
    if isfun  {*如果是函数*}
    then if sy = colon  {*如果是冒号则处理返回值类型部分*}
         then begin
                insymbol; { function type }
                if sy = ident
                then begin
                       x := loc(id);
                       insymbol;
                       if x <> 0
                       then if tab[x].typ in stantyps
                            then tab[prt].typ := tab[x].typ
                            else error(15)  {*函数结果必须是integer,real,boolean或char类型*}
                     end
                else skip( [semicolon]+fsys,2 )
              end
         else error(5);
    if sy = semicolon {*声明结束要有分号*}
    then insymbol
    else error(14);
    repeat    {*循环处理变量和函数/过程声明部分*}
      if sy = constsy
      then constdec;
      if sy = typesy
      then typedeclaration;
      if sy = varsy
      then variabledeclaration;
      btab[prb].vsize := dx;
      while sy in [procsy,funcsy] do  {*如果一个分程序块里面还有小的分程序*}
        procdeclaration;
      test([beginsy],blockbegsys+statbegsys,56)
    until sy in statbegsys;
    tab[prt].adr := lc;
    insymbol;
    statement([semicolon,endsy]+fsys);  {*处理代码块*}
    while sy in [semicolon]+statbegsys do
      begin
        if sy = semicolon
        then insymbol
        else error(14);
        statement([semicolon,endsy]+fsys);
      end;
    if sy = endsy {*分程序结束*}
    then insymbol
    else error(57);
    test( fsys+[period],[],6 )
  end { block };



procedure interpret;    {*P-code解释执行程序*}
  var ir : order ;         { instruction buffer }   {*当前的指令*}
      pc : integer;        { program counter }  {*指令寄存器,计组pc值*}
      t  : integer;        { top stack index }  {*栈顶指针*}
      b  : integer;        { base index } {*基址地址*}
      h1,h2,h3: integer;
      lncnt,ocnt,blkcnt,chrcnt: integer;     { counters }
      ps : ( run,fin,caschk,divchk,inxchk,stkchk,linchk,lngchk,redchk );    {*各种错误信息标志*}
      fld: array [1..4] of integer;  { default field widths }
      display : array[0..lmax] of integer;
      s  : array[1..stacksize] of   { blockmark:     }    {*运行栈*}
            record
              case cn : types of        { s[b+0] = fct result }
                ints : (i: integer );   { s[b+1] = return adr }
                reals :(r: real );      { s[b+2] = static link }
                bools :(b: boolean );   { s[b+3] = dynamic link }
                chars :(c: char )       { s[b+4] = table index }
            end;

  procedure dump;   {*程序执行时卸出打印现场剖析信息(display,t,b及运行栈S的内容)*}
    var p,h3 : integer;
    begin
      h3 := tab[h2].lev;
      writeln(psout);
      writeln(psout);
      writeln(psout,'       calling ', tab[h2].name );
      writeln(psout,'         level ',h3:4);
      writeln(psout,' start of code ',pc:4);
      writeln(psout);
      writeln(psout);
      writeln(psout,' contents of display ');
      writeln(psout);
      for p := h3 downto 0 do
        writeln(psout,p:4,display[p]:6);
      writeln(psout);
      writeln(psout);
      writeln(psout,' top of stack  ',t:4,' frame base ':14,b:4);
      writeln(psout);
      writeln(psout);
      writeln(psout,' stack contents ':20);
      writeln(psout);
      for p := t downto 1 do
        writeln( psout, p:14, s[p].i:8);
      writeln(psout,'< = = = >':22)
    end; {dump }
  {*以下为PCODE 0-63条指令所对应的操作*}
  procedure inter0;
    begin
      case ir.f of{*0-2所对应的情况没有分清*}
        0 : begin { load addrss }
              t := t + 1; {*栈顶指针上移*}
              if t > stacksize  {*如果超过了栈的大小上限*}
              then ps := stkchk {*将ps设置为stkchk记录错误类型*}
              else s[t].i := display[ir.x]+ir.y {*完成取值, 实际地址 = level起始地址+位移地址,放到栈顶*}
            end;
        1 : begin  { load value }
              t := t + 1;
              if t > stacksize
              then ps := stkchk
              else s[t] := s[display[ir.x]+ir.y]  {*传入的是地址,完成之后将值放到栈顶*}
            end;
        2 : begin  { load indirect }
              t := t + 1;
              if t > stacksize
              then ps := stkchk
              else s[t] := s[s[display[ir.x]+ir.y].i] {*间接取值*}
            end;
        3 : begin  { update display }
              h1 := ir.y;
              h2 := ir.x;
              h3 := b;
              repeat
                display[h1] := h3;
                h1 := h1-1; {level-1}
                h3 := s[h3+2].i
              until h1 = h2
            end;
        8 : case ir.y of  {*标准函数处理*}
              0 : s[t].i := abs(s[t].i);
              1 : s[t].r := abs(s[t].r);
              2 : s[t].i := sqr(s[t].i);
              3 : s[t].r := sqr(s[t].r);
              4 : s[t].b := odd(s[t].i);
              5 : s[t].c := chr(s[t].i);
              6 : s[t].i := ord(s[t].c);
              7 : s[t].c := succ(s[t].c);
              8 : s[t].c := pred(s[t].c);
              9 : s[t].i := round(s[t].r);
              10 : s[t].i := trunc(s[t].r);
              11 : s[t].r := sin(s[t].r);
              12 : s[t].r := cos(s[t].r);
              13 : s[t].r := exp(s[t].r);
              14 : s[t].r := ln(s[t].r);
              15 : s[t].r := sqrt(s[t].r);
              16 : s[t].r := arcTan(s[t].r);
              17 : begin
                     t := t+1;
                     if t > stacksize
                     then ps := stkchk
                     else s[t].b := eof(prd)
                   end;
              18 : begin
                     t := t+1;
                     if t > stacksize
                     then ps := stkchk
                     else s[t].b := eoln(prd)
                   end;
            end;
        9 : s[t].i := s[t].i + ir.y; { offset }
      end { case ir.y }
    end; { inter0 }

  procedure inter1;
    var h3, h4: integer;
    begin
      case ir.f of
        10 : pc := ir.y ; { jump }
        11 : begin  { conditional jump }  {*条件跳转指令*}
               if not s[t].b  {*如果栈顶值为假则跳转到y指令*}
               then pc := ir.y;
               t := t - 1 {*退栈....因为判断结果只是临时存储,之后的判断会有新的结果*}
            end;
        12 : begin { switch }   {*跳到y的地址,查找情况表,情况表由一系列f为13的指令构成....处理case那部分*}
               h1 := s[t].i;  {*记录栈顶值*}
               t := t-1;  {*退栈*}
               h2 := ir.y;    {*记录要跳转的地址*}
               h3 := 0;
               repeat
                 if code[h2].f <> 13  {*跳转的不是情况表*}
                 then begin
                        h3 := 1;
                        ps := caschk
                      end
                 else if code[h2].y = h1  {*下面部分没看懂*}
                      then begin
                             h3 := 1;
                             pc := code[h2+1].y
                           end
                      else h2 := h2 + 2
               until h3 <> 0
             end;
        14 : begin { for1up } {*增量for(to)的初始判断,其中s[t-2].i存储的是计数变量的地址,s[t-1].i存储的是计数变量值(刚进来时是初值),s[t-2].i存储的是计数变量的终值*}
               h1 := s[t-1].i;  {*第一次判断将计数变量的初值赋值给h1*}
               if h1 <= s[t].i
               then s[s[t-2].i].i := h1
               else begin
                      t := t - 3;   {*退去三格*}
                      pc := ir.y    {*跳出循环,这里的y由后面的语句回传得到*}
                    end
             end;
        15 : begin { for2up } {*增量的再次判断*}
               h2 := s[t-2].i;
               h1 := s[h2].i+1;
               if h1 <= s[t].i
               then begin
                      s[h2].i := h1;  {*不断增长s[t-1].i的值*}
                      pc := ir.y  {*跳出循环*}
                    end
               else t := t-3;
             end;
        16 : begin  { for1down }  {*downto*}
               h1 := s[t-1].i;
               if h1 >= s[t].i
               then s[s[t-2].i].i := h1
               else begin
                      pc := ir.y;
                      t := t - 3
                    end
             end;
        17 : begin  { for2down }  {*downto*}
               h2 := s[t-2].i;
               h1 := s[h2].i-1;
               if h1 >= s[t].i
               then begin
                      s[h2].i := h1;
                      pc := ir.y
                    end
               else t := t-3;
             end;
        18 : begin  { mark stack }  {*标记栈*}
               h1 := btab[tab[ir.y].ref].vsize; {*获得当前过程所需要的栈空间的大小*}
               if t+h1 > stacksize
               then ps := stkchk
               else begin
                      t := t+5; {*预留内务信息区*}
                      s[t-1].i := h1-1;
                      s[t].i := ir.y  {*栈顶存放被调用过程在tab表中的位置*}
                    end
             end;
        19 : begin  { call }  {*看乱了==*}
               h1 := t-ir.y;  { h1 points to base } {*h1指向基址*}
               h2 := s[h1+4].i;  { h2 points to tab } {*h2指向过程名在tab表中的位置*}
               h3 := tab[h2].lev; {*h3记录当前过程或函数的层次*}
               display[h3+1] := h1;   {*新建一个层次,并将该层次基址指向当前层次基址*}
               h4 := s[h1+3].i+h1;  {*动态链DL的值*}
               s[h1+1].i := pc;   {*返回地址*}
               s[h1+2].i := display[h3];
               s[h1+3].i := b;
               for h3 := t+1 to h4 do
                 s[h3].i := 0;
               b := h1;
               t := h4;
               pc := tab[h2].adr;
               if stackdump
               then dump
             end;
      end { case }
    end; { inter1 }

  procedure inter2;
    begin
      case ir.f of
        20 : begin   { index1 }
               h1 := ir.y;  { h1 points to atab }
               h2 := atab[h1].low;    {*atab中的上下界是1...n存储的是1 和 n*}
               h3 := s[t].i;  {*h3存放的是arry[3]中的3*}
               if h3 < h2
               then ps := inxchk
               else if h3 > atab[h1].high
                    then ps := inxchk
               else begin
                    t := t-1;
                    s[t].i := s[t].i+(h3-h2)  {*数组存储基址加上偏移*}
                   end
             end;
        21 : begin  { index }
               h1 := ir.y ; { h1 points to atab }
               h2 := atab[h1].low;
               h3 := s[t].i;
               if h3 < h2
               then ps := inxchk
               else if h3 > atab[h1].high
                    then ps := inxchk
                    else begin
                           t := t-1;
                           s[t].i := s[t].i + (h3-h2)*atab[h1].elsize
                         end
             end;
        22 : begin  { load block }
               h1 := s[t].i;  {*获取栈顶的值*}
               t := t-1;
               h2 := ir.y+t;  {*获取块的分配空间 大小为ir.y*}
               if h2 > stacksize
               then ps := stkchk
               else while t < h2 do {*循环将h1指向的块的值装入栈顶*}
                      begin
                        t := t+1;
                        s[t] := s[h1];
                        h1 := h1+1
                      end
             end;
        23 : begin  { copy block }  {*拷贝块*}
               h1 := s[t-1].i;
               h2 := s[t].i;
               h3 := h1+ir.y;
               while h1 < h3 do
                 begin
                   s[h1] := s[h2];
                   h1 := h1+1;
                   h2 := h2+1
                 end;
               t := t-2
             end;
        24 : begin  { literal }
               t := t+1;
               if t > stacksize
               then ps := stkchk
               else s[t].i := ir.y
             end;
        25 : begin  { load real }
               t := t+1;
               if t > stacksize
               then ps := stkchk
               else s[t].r := rconst[ir.y]
             end;
        26 : begin  { float }
               h1 := t-ir.y;  {*获得符号的地址*,调用的时候传入的都是0或者1}
               s[h1].r := s[h1].i {*令实型等于整数部分*}
             end;
        27 : begin  { read }  {*读*}
               if eof(prd)
               then ps := redchk
               else case ir.y of
                      1 : read(prd, s[s[t].i].i);
                      2 : read(prd, s[s[t].i].r);
                      4 : read(prd, s[s[t].i].c);
                    end;
               t := t-1
             end;
        28 : begin   { write string }
               h1 := s[t].i;
               h2 := ir.y;
               t := t-1;
               chrcnt := chrcnt+h1;
               if chrcnt > lineleng
               then ps := lngchk;
               repeat
                 write(prr,stab[h2]);
                 h1 := h1-1;
                 h2 := h2+1
               until h1 = 0
             end;
        29 : begin  { write1 }
               chrcnt := chrcnt + fld[ir.y];
               if chrcnt > lineleng
               then ps := lngchk
               else case ir.y of
                      1 : write(prr,s[t].i:fld[1]);
                      2 : write(prr,s[t].r:fld[2]);
                      3 : if s[t].b
                          then write('true')
                          else write('false');
                      4 : write(prr,chr(s[t].i));
                    end;
               t := t-1
             end;
      end { case }
    end; { inter2 }

  procedure inter3;
    begin
      case ir.f of
        30 : begin { write2 }
               chrcnt := chrcnt+s[t].i;
               if chrcnt > lineleng
               then ps := lngchk
               else case ir.y of
                      1 : write(prr,s[t-1].i:s[t].i);
                      2 : write(prr,s[t-1].r:s[t].i);
                      3 : if s[t-1].b
                          then write('true')
                          else write('false');
                    end;
               t := t-2
             end;
        31 : ps := fin;
        32 : begin  { exit procedure }  {*退出过程*}
               t := b-1;  {*退栈*}
               pc := s[b+1].i;  {*PC指向RA*}
               b := s[b+3].i  {*获得返回后的base基址,s[b+3]指向DL*}
             end;
        33 : begin  { exit function } {*退出函数*}
               t := b;  {*退栈,保留函数名*}
               pc := s[b+1].i;
               b := s[b+3].i
             end;
        34 : s[t] := s[s[t].i];
        35 : s[t].b := not s[t].b;
        36 : s[t].i := -s[t].i;
        37 : begin
               chrcnt := chrcnt + s[t-1].i;
               if chrcnt > lineleng
               then ps := lngchk
               else write(prr,s[t-2].r:s[t-1].i:s[t].i);
               t := t-3
             end;
        38 : begin  { store }
               s[s[t-1].i] := s[t];
               t := t-2
             end;
        39 : begin
               t := t-1;
               s[t].b := s[t].r=s[t+1].r
             end;
      end { case }
    end; { inter3 }

  procedure inter4;
    begin
      case ir.f of
        40 : begin
               t := t-1;
               s[t].b := s[t].r <> s[t+1].r
             end;
        41 : begin
               t := t-1;
               s[t].b := s[t].r < s[t+1].r
             end;
        42 : begin
               t := t-1;
               s[t].b := s[t].r <= s[t+1].r
             end;
        43 : begin
               t := t-1;
               s[t].b := s[t].r > s[t+1].r
             end;
        44 : begin
               t := t-1;
               s[t].b := s[t].r >= s[t+1].r
             end;
        45 : begin
               t := t-1;
               s[t].b := s[t].i = s[t+1].i
             end;
        46 : begin
               t := t-1;
               s[t].b := s[t].i <> s[t+1].i
             end;
        47 : begin
               t := t-1;
               s[t].b := s[t].i < s[t+1].i
             end;
        48 : begin
               t := t-1;
               s[t].b := s[t].i <= s[t+1].i
             end;
        49 : begin
               t := t-1;
               s[t].b := s[t].i > s[t+1].i
             end;
      end { case }
    end; { inter4 }

  procedure inter5; {*一系列运算操作*}
    begin
      case ir.f of
        50 : begin
               t := t-1;
               s[t].b := s[t].i >= s[t+1].i
             end;
        51 : begin
               t := t-1;
               s[t].b := s[t].b or s[t+1].b
             end;
        52 : begin
               t := t-1;
               s[t].i := s[t].i+s[t+1].i
             end;
        53 : begin
               t := t-1;
               s[t].i := s[t].i-s[t+1].i
             end;
        54 : begin
               t := t-1;
               s[t].r := s[t].r+s[t+1].r;
             end;
        55 : begin
               t := t-1;
               s[t].r := s[t].r-s[t+1].r;
             end;
        56 : begin
               t := t-1;
               s[t].b := s[t].b and s[t+1].b
             end;
        57 : begin
               t := t-1;
               s[t].i := s[t].i*s[t+1].i
             end;
        58 : begin
               t := t-1;
               if s[t+1].i = 0  {*除数与取模都不能为0*}
               then ps := divchk
               else s[t].i := s[t].i div s[t+1].i
             end;
        59 : begin
               t := t-1;
               if s[t+1].i = 0
               then ps := divchk
               else s[t].i := s[t].i mod s[t+1].i
             end;
      end { case }
    end; { inter5 }

  procedure inter6;
    begin
      case ir.f of
        60 : begin
               t := t-1;
               s[t].r := s[t].r*s[t+1].r;
             end;
        61 : begin
               t := t-1;
               s[t].r := s[t].r/s[t+1].r;
             end;
        62 : if eof(prd)
             then ps := redchk
             else readln;
        63 : begin
               writeln(prr);
               lncnt := lncnt+1;
               chrcnt := 0;
               if lncnt > linelimit
               then ps := linchk
             end
      end { case };
    end; { inter6 }
  begin { interpret }
    s[1].i := 0;
    s[2].i := 0;
    s[3].i := -1;
    s[4].i := btab[1].last;
    display[0] := 0;
    display[1] := 0;
    t := btab[2].vsize-1;
    b := 0;
    pc := tab[s[4].i].adr;
    lncnt := 0;
    ocnt := 0;
    chrcnt := 0;
    ps := run;
    fld[1] := 10;   {*四种类型的默认域宽*}
    fld[2] := 22;
    fld[3] := 10;
    fld[4] := 1;
    repeat   {*循环处理指令*}
      ir := code[pc];
      pc := pc+1;
      ocnt := ocnt+1;
      case ir.f div 10 of
        0 : inter0;
        1 : inter1;
        2 : inter2;
        3 : inter3;
        4 : inter4;
        5 : inter5;
        6 : inter6;
      end; { case }
    until ps <> run;

    {*错误信息及出错时各种变量信息输出到文件*}
    if ps <> fin
    then begin
           writeln(prr);
           write(prr, ' halt at', pc :5, ' because of ');
           case ps of {*根据不同的信息来源报错*}
             caschk  : writeln(prr,'undefined case');
             divchk  : writeln(prr,'division by 0');
             inxchk  : writeln(prr,'invalid index');
             stkchk  : writeln(prr,'storage overflow');
             linchk  : writeln(prr,'too much output');
             lngchk  : writeln(prr,'line too long');
             redchk  : writeln(prr,'reading past end or file');
           end;
           h1 := b;
           blkcnt := 10;    { post mortem dump }
           repeat
             writeln( prr );  {*写入result文件*}
             blkcnt := blkcnt-1;
             if blkcnt = 0
             then h1 := 0;
             h2 := s[h1+4].i; {*获取过程或者函数名在tab表中的位置*}
             if h1 <> 0
             then writeln( prr, '',tab[h2].name, 'called at', s[h1+1].i:5);
             h2 := btab[tab[h2].ref].last;  {*获取分程序中说明的最后一个标识符在tab表中的位置*}
             while h2 <> 0 do {*循环处理分程序中的标识符*}
               with tab[h2] do
                 begin
                   if obj = vvariable
                   then if typ in stantyps
                        then begin
                               write(prr,'',name,'=');
                               if normal
                               then h3 := h1+adr
                               else h3 := s[h1+adr].i;
                               case typ of
                                 ints : writeln(prr,s[h3].i);
                                 reals: writeln(prr,s[h3].r);
                                 bools: if s[h3].b
                                        then writeln(prr,'true')
                                        else writeln(prr,'false');
                                 chars: writeln(prr,chr(s[h3].i mod 64 ))
                               end
                             end;
                   h2 := link
                 end;
             h1 := s[h1+3].i  {*指向分程序的DL,即上一层*}
           until h1 < 0
         end;
    writeln(prr);
    writeln(prr,ocnt,' steps');
  end; { interpret }



procedure setup;    {*建立保留字表和特定字符表*}
  begin
    key[1] := 'and       ';
    key[2] := 'array     ';
    key[3] := 'begin     ';
    key[4] := 'case      ';
    key[5] := 'const     ';
    key[6] := 'div       ';
    key[7] := 'do        ';
    key[8] := 'downto    ';
    key[9] := 'else      ';
    key[10] := 'end       ';
    key[11] := 'for       ';
    key[12] := 'function  ';
    key[13] := 'if        ';
    key[14] := 'mod       ';
    key[15] := 'not       ';
    key[16] := 'of        ';
    key[17] := 'or        ';
    key[18] := 'procedure ';
    key[19] := 'program   ';
    key[20] := 'record    ';
    key[21] := 'repeat    ';
    key[22] := 'then      ';
    key[23] := 'to        ';
    key[24] := 'type      ';
    key[25] := 'until     ';
    key[26] := 'var       ';
    key[27] := 'while     ';

    ksy[1] := andsy;
    ksy[2] := arraysy;
    ksy[3] := beginsy;
    ksy[4] := casesy;
    ksy[5] := constsy;
    ksy[6] := idiv;
    ksy[7] := dosy;
    ksy[8] := downtosy;
    ksy[9] := elsesy;
    ksy[10] := endsy;
    ksy[11] := forsy;
    ksy[12] := funcsy;
    ksy[13] := ifsy;
    ksy[14] := imod;
    ksy[15] := notsy;
    ksy[16] := ofsy;
    ksy[17] := orsy;
    ksy[18] := procsy;
    ksy[19] := programsy;
    ksy[20] := recordsy;
    ksy[21] := repeatsy;
    ksy[22] := thensy;
    ksy[23] := tosy;
    ksy[24] := typesy;
    ksy[25] := untilsy;
    ksy[26] := varsy;
    ksy[27] := whilesy;


    sps['+'] := plus;
    sps['-'] := minus;
    sps['*'] := times;
    sps['/'] := rdiv;
    sps['('] := lparent;
    sps[')'] := rparent;
    sps['='] := eql;
    sps[','] := comma;
    sps['['] := lbrack;
    sps[']'] := rbrack;
    sps[''''] := neq;
    sps['!'] := andsy;
    sps[';'] := semicolon;
  end { setup };

procedure enterids; {*在符号表中登记标准类型、函数和过程的名字以及它们的相应信息*}
  begin
    enter('          ',vvariable,notyp,0); { sentinel }
    enter('false     ',konstant,bools,0);
    enter('true      ',konstant,bools,1);
    enter('real      ',typel,reals,1);
    enter('char      ',typel,chars,1);
    enter('boolean   ',typel,bools,1);
    enter('integer   ',typel,ints,1);
    enter('abs       ',funktion,reals,0);
    enter('sqr       ',funktion,reals,2);
    enter('odd       ',funktion,bools,4);
    enter('chr       ',funktion,chars,5);
    enter('ord       ',funktion,ints,6);
    enter('succ      ',funktion,chars,7);
    enter('pred      ',funktion,chars,8);
    enter('round     ',funktion,ints,9);
    enter('trunc     ',funktion,ints,10);
    enter('sin       ',funktion,reals,11);
    enter('cos       ',funktion,reals,12);
    enter('exp       ',funktion,reals,13);
    enter('ln        ',funktion,reals,14);
    enter('sqrt      ',funktion,reals,15);
    enter('arctan    ',funktion,reals,16);
    enter('eof       ',funktion,bools,17);
    enter('eoln      ',funktion,bools,18);
    enter('read      ',prozedure,notyp,1);
    enter('readln    ',prozedure,notyp,2);
    enter('write     ',prozedure,notyp,3);
    enter('writeln   ',prozedure,notyp,4);
    enter('          ',prozedure,notyp,0);
  end;


{*主程序*}
begin  { main }
  setup;	{*初始化变量*}
  constbegsys := [ plus, minus, intcon, realcon, charcon, ident ];	{*常量的开始符号集合(begin)*}
  typebegsys := [ ident, arraysy, recordsy ];	{*类型的开始符号集合*}
  blockbegsys := [ constsy, typesy, varsy, procsy, funcsy, beginsy ];	{*分语句的开始符号集合*}
  facbegsys := [ intcon, realcon, charcon, ident, lparent, notsy ];		{*因子的开始符号集合*}
  statbegsys := [ beginsy, ifsy, whilesy, repeatsy, forsy, casesy ];	{*statement开始符号集合*}
  stantyps := [ notyp, ints, reals, bools, chars ];
  lc := 0;		{*重置PC*}
  ll := 0;		{*重置当前行的长度*}
  cc := 0;		{*重置当前行位置指针*}
  ch := ' ';	{*重置当前符号*}
  errpos := 0;	 {*重置错误位置*}
  errs := [];	{重置错误集合}
  writeln( 'NOTE input/output for users program is console : ' );	{*提示信息，让用户输入将要编译的源程序文件和编译输出文件的名字*}
  writeln;
  write( 'Source input file ?');	{*代码输出文件*}
  readln( inf );
  assign( psin, inf );
  reset( psin );
  write( 'Source listing file ?');	{**}
  readln( outf );
  assign( psout, outf );
  rewrite( psout );
  assign ( prd, 'con' );
  write( 'result file : ' );	{*结果输出文件*}
  readln( fprr );
  assign( prr, fprr );
  reset ( prd );
  rewrite( prr );

  t := -1;	{*设置tab表的栈顶初值,以下类似, 设置各自的索引变量*}
  a := 0;	{*atab表*}
  b := 1;	{*btab表*}
  sx := 0;	{*stab表*}
  c2 := 0;	{*rconst表*}
  display[0] := 1;	{*设置display的初值,第一层*}
  iflag := false;	{*一系列flag的初始化*}
  oflag := false;
  skipflag := false;
  prtables := false;
  stackdump := false;

  insymbol;		{*调用词法分析程序insymbol取第一个单词符号, 同时他也能处理注释行*}

  if sy <> programsy	{*<> 相当于 "!=", 要求第一个符号是program关键字，不是的话就报错*}
  then error(3)
  else begin
         insymbol;
         if sy <> ident		{*如果不是程序名的话报错*}
         then error(2)
         else begin
                progname := id;
                insymbol;
                if sy <> lparent	{*如果不是"("则报错*}
                then error(9)
                else repeat				{*处理程序名后面"(input/output)"部分*}
                       insymbol;
                       if sy <> ident
                       then error(2)
                       else begin
                              if id = 'input     '
                              then iflag := true
                              else if id = 'output    '
                                   then oflag := true
                                   else error(0);
                              insymbol
                            end
                     until sy <> comma;		{*不等于逗号的时候停止*}
                if sy = rparent
                then insymbol
                else error(4);
                if not oflag then error(20)
              end
       end;
  enterids; {*在符号表中登录基本类型、函数和过程的名字，以及它们的相应信息*}
  with btab[1] do	{*对分程序表的第一个程序的各个记录分量进行设置*}
    begin
      last := t;
      lastpar := 1;
      psize := 0;
      vsize := 0;
    end;
  block( blockbegsys + statbegsys, false, 1 ); {*分析处理分程序,进入block分析(最外层)*}
  if sy <> period
  then error(2);
  emit(31);  { halt }	{*生成P-code指令*}
  if prtables
  then printtables;	{*打印编译生成的符号表、分程序表、实常数表以及P-code*}
  if errs = []	{*如果没有错误则进入P-code解释执行程序, 有错误则进行打印*}
  then interpret
  else begin
         writeln( psout );
         writeln( psout, 'compiled with errors' );
         writeln( psout );
         errormsg; {*打印出错信息的摘要*}
       end;
  writeln( psout );
  close( psout );	{*关闭文件*}
  close( prr )
end.
