int = con1 const 1
int = con2 const 2
char = ch1 const '_'
int = i var 
int = j var 
int = array array 
int = scope_var var 
char = ch var 
int = Fibonacci function 
int = n para 
if_1_else = n bne 1
1 =  ret 
 =  funcend 
if_1_else: =   
if_2_else = n bne 2
1 =  ret 
 =  funcend 
if_2_else: =   
$T0 = -1 + n
$T0 =  push 
Fibonacci =  call 
$T1 = RET  
$T2 = -2 + n
$T2 =  push 
Fibonacci =  call 
$T3 = RET  
$T4 = $T1 + $T3
$T4 =  ret 
 =  funcend 
int = test_recursion function 
8 =  push 
Fibonacci =  call 
$T0 = RET  
if_3_else = $T0 bne 21
"success!" =  write 
0 =  ret 
 =  funcend 
if_3_else: =   
"fail!" =  write 
0 =  ret 
 =  funcend 
int = test_if function 
int = plus para 
char = flag const 'g'
char = ch var 
ch = 'a'  
$T0 = ch + plus
if_4_else = $T0 ble 103
"success1!" =  write 
if_4_else: =   
if_5_else = ch beqz 
"success2!" =  write 
if_5_else: =   
if_6_else = 0 beqz 
"fail1!" =  write 
if_6_else: =   
0 =  ret 
 =  funcend 
void = test_while function 
int = j const 100
int = sum var 
sum = 0  
i = 0  
while_1_beg: =   
while_1_end = i bge 100
array[i] = i  
$T0 = 1 + i
i = $T0  
while_1_beg =  j 
while_1_end: =   
i = 0  
while_2_beg: =   
while_2_end = i bge 100
$T1 = sum + i
sum = $T1  
$T2 = 1 + i
i = $T2  
while_2_beg =  j 
while_2_end: =   
if_7_else = sum bne 4950
"success!" =  write 
 =  funcend 
if_7_else: =   
"fail!" =  write 
 =  funcend 
void = test_switch function 
char = flag var 
flag = 'a'  
case_1_1_end = flag bne 'a'
"success!" =  write 
case_1_end =  j 
case_1_1_end: =   
"fail!" =  write 
case_1_end: =   
 =  funcend 
int = to_upper function 
char = a para 
int = b para 
$T0 = a - b
$T0 =  ret 
 =  funcend 
void = test_scanf_printf function 
char = a var 
char = b var 
char = c var 
a =  read 
b =  read 
c =  read 
"Input is:" =  write 
a =  write 
b =  write 
c =  write 
a =  push 
32 =  push 
to_upper =  call 
$T0 = RET  
$T0 =  write 
b =  push 
32 =  push 
to_upper =  call 
$T1 = RET  
$T1 =  write 
c =  push 
32 =  push 
to_upper =  call 
$T2 = RET  
$T2 =  write 
 =  funcend 
void = test_relation_operator function 
int = x para 
int = y para 
if_8_else = x bne y
" x==y:true" =  write 
if_8_else: =   
if_9_else = x ble y
" x>y:true" =  write 
if_9_else: =   
if_10_else = x bge y
" x<y:true" =  write 
if_10_else: =   
if_11_else = x blt y
" x>=y:true" =  write 
if_11_else: =   
if_12_else = x bgt y
" x<=y:true" =  write 
if_12_else: =   
if_13_else = x beq y
" x!=y:true" =  write 
if_13_else: =   
 =  funcend 
void = test_expression function 
int = x var 
int = y var 
int = z var 
int = A array 
x = 10  
y = 1  
A[0] = 2  
$T0 = 1 * x
$T1 = $T0 * A[0]
$T2 = 0 - y
$T3 = $T1 * $T2
$T4 = $T3 * y
$T5 = $T4 / 2
'a' =  push 
32 =  push 
to_upper =  call 
$T6 = RET  
$T7 = 0 - $T5
$T8 = $T7 + '*'
$T9 = $T8 + $T6
$T10 = $T9 - 'A'
$T11 = x + $T10
z = $T11  
if_14_else = z bne 62
"success!" =  write 
 =  funcend 
if_14_else: =   
"fail!" =  write 
 =  funcend 
void = test_symbol function 
char = _a1 var 
char = _a2 var 
char = _a3 var 
char = _a4 var 
char = _a5 var 
int = aa var 
int = Aa var 
int = array array 
int = i var 
int = sum var 
_a1 = '*'  
_a2 = '/'  
_a3 = '+'  
_a4 = '-'  
_a5 = '_'  
aa = 1  
Aa = 0  
if_15_else = aa bne 0
"fail1!" =  write 
if_15_else: =   
i = 0  
$T0 = _a1 + _a2
$T1 = $T0 + _a3
$T2 = $T1 + _a4
$T3 = $T2 + _a5
sum = $T3  
while_3_beg: =   
while_3_end = i bge 10
array[i] = i  
$T4 = 1 + i
i = $T4  
while_3_beg =  j 
while_3_end: =   
while_4_beg: =   
while_4_end = i bge 20
$T5 = -10 + 'a'
$T6 = $T5 + i
array[i] = $T6  
$T7 = 1 + i
i = $T7  
while_4_beg =  j 
while_4_end: =   
while_5_beg: =   
while_5_end = i bge 30
$T8 = -20 + 'A'
$T9 = $T8 + i
array[i] = $T9  
$T10 = 1 + i
i = $T10  
while_5_beg =  j 
while_5_end: =   
i = 0  
while_6_beg: =   
while_6_end = i bge 30
$T11 = sum + array[i]
sum = $T11  
$T12 = 1 + i
i = $T12  
while_6_beg =  j 
while_6_end: =   
if_16_else = sum bne 2027
"success!" =  write 
 =  funcend 
if_16_else: =   
"fail2!" =  write 
 =  funcend 
void = local_scope function 
int = scope_var var 
scope_var = 10  
"the local scope_var = " =  write 
scope_var =  write 
 =  funcend 
void = test_scope function 
int = tem var 
scope_var = 20  
tem = scope_var  
"the global scope_var = " =  write 
scope_var =  write 
local_scope =  call 
"the global scope_var = " =  write 
scope_var =  write 
if_17_else = tem bne scope_var
"success!" =  write 
 =  funcend 
if_17_else: =   
"fail!" =  write 
 =  funcend 
void = test function 
int = i var 
int = j var 
int = k var 
j = 0  
k = 9  
while_7_beg: =   
while_7_end = j bge k
i =  read 
case_2_1_end = i bne 0
"test_recursion begin:" =  write 
test_recursion =  call 
case_2_end =  j 
case_2_1_end: =   
case_2_2_end = i bne 1
"test_if begin:" =  write 
20 =  push 
test_if =  call 
case_2_end =  j 
case_2_2_end: =   
case_2_3_end = i bne 2
"test_while begin:" =  write 
test_while =  call 
case_2_end =  j 
case_2_3_end: =   
case_2_4_end = i bne 3
"test_switch begin:" =  write 
test_switch =  call 
case_2_end =  j 
case_2_4_end: =   
case_2_5_end = i bne 4
"test_scanf_printf begin:" =  write 
test_scanf_printf =  call 
case_2_end =  j 
case_2_5_end: =   
case_2_6_end = i bne 5
"test_expression begin:" =  write 
test_expression =  call 
case_2_end =  j 
case_2_6_end: =   
case_2_7_end = i bne 6
"test_symbol begin:" =  write 
test_symbol =  call 
case_2_end =  j 
case_2_7_end: =   
case_2_8_end = i bne 7
"test_relation_operator begin:" =  write 
3 =  push 
6 =  push 
test_relation_operator =  call 
7 =  push 
5 =  push 
test_relation_operator =  call 
2 =  push 
2 =  push 
test_relation_operator =  call 
case_2_end =  j 
case_2_8_end: =   
case_2_9_end = i bne 8
"test_scope begin:" =  write 
test_scope =  call 
case_2_end =  j 
case_2_9_end: =   
case_2_end: =   
"*********************" =  write 
$T0 = 1 + j
j = $T0  
while_7_beg =  j 
while_7_end: =   
ch = 95  
"ch=" =  write 
ch =  write 
"@#$$&*^^^^test end" =  write 
 =  funcend 
void = main function 
test =  call 
 =  exit 
